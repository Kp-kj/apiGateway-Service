// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: task.proto

package task

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreatePublishTaskInput 策展任务信息接收表(创建策展)（可修改为保存创建人信息）
type CreatePublishTaskInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator      string  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`           // 创建者
	TweetAddress string  `protobuf:"bytes,2,opt,name=tweetAddress,proto3" json:"tweetAddress,omitempty"` // 推特文章地址
	TweetTopic   string  `protobuf:"bytes,3,opt,name=TweetTopic,proto3" json:"TweetTopic,omitempty"`     // 推特文章
	TweetAvatar  string  `protobuf:"bytes,7,opt,name=TweetAvatar,proto3" json:"TweetAvatar,omitempty"`   // 推特照片
	AwardBudget  float64 `protobuf:"fixed64,4,opt,name=awardBudget,proto3" json:"awardBudget,omitempty"` // 奖励预算
	MaxUser      int64   `protobuf:"zigzag64,5,opt,name=maxUser,proto3" json:"maxUser,omitempty"`        // 最大奖励用户数
	AwardAmount  float64 `protobuf:"fixed64,6,opt,name=awardAmount,proto3" json:"awardAmount,omitempty"` // 奖励金额
	Label        string  `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty"`               // 标签
}

func (x *CreatePublishTaskInput) Reset() {
	*x = CreatePublishTaskInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublishTaskInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublishTaskInput) ProtoMessage() {}

func (x *CreatePublishTaskInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublishTaskInput.ProtoReflect.Descriptor instead.
func (*CreatePublishTaskInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePublishTaskInput) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreatePublishTaskInput) GetTweetAddress() string {
	if x != nil {
		return x.TweetAddress
	}
	return ""
}

func (x *CreatePublishTaskInput) GetTweetTopic() string {
	if x != nil {
		return x.TweetTopic
	}
	return ""
}

func (x *CreatePublishTaskInput) GetTweetAvatar() string {
	if x != nil {
		return x.TweetAvatar
	}
	return ""
}

func (x *CreatePublishTaskInput) GetAwardBudget() float64 {
	if x != nil {
		return x.AwardBudget
	}
	return 0
}

func (x *CreatePublishTaskInput) GetMaxUser() int64 {
	if x != nil {
		return x.MaxUser
	}
	return 0
}

func (x *CreatePublishTaskInput) GetAwardAmount() float64 {
	if x != nil {
		return x.AwardAmount
	}
	return 0
}

func (x *CreatePublishTaskInput) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type Mistake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Mistake) Reset() {
	*x = Mistake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mistake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mistake) ProtoMessage() {}

func (x *Mistake) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mistake.ProtoReflect.Descriptor instead.
func (*Mistake) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

func (x *Mistake) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 策展任务信息任务列表返回表
type RePublishTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationData   *PaginationData     `protobuf:"bytes,1,opt,name=paginationData,proto3" json:"paginationData,omitempty"`
	RePublishTaskBak []*RePublishTaskBak `protobuf:"bytes,2,rep,name=rePublishTaskBak,proto3" json:"rePublishTaskBak,omitempty"`
}

func (x *RePublishTask) Reset() {
	*x = RePublishTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RePublishTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RePublishTask) ProtoMessage() {}

func (x *RePublishTask) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RePublishTask.ProtoReflect.Descriptor instead.
func (*RePublishTask) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{2}
}

func (x *RePublishTask) GetPaginationData() *PaginationData {
	if x != nil {
		return x.PaginationData
	}
	return nil
}

func (x *RePublishTask) GetRePublishTaskBak() []*RePublishTaskBak {
	if x != nil {
		return x.RePublishTaskBak
	}
	return nil
}

// 策展任务信息返回表
type RePublishTaskBak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string  `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`               // 任务ID
	CreatedAt     string  `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`         // 创建时间
	Creator       string  `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`             // 创建者ID
	CreatorName   string  `protobuf:"bytes,4,opt,name=creatorName,proto3" json:"creatorName,omitempty"`     // 创建者账户
	CreatorNick   string  `protobuf:"bytes,5,opt,name=creatorNick,proto3" json:"creatorNick,omitempty"`     // 创建者昵称
	CreatorAvatar string  `protobuf:"bytes,6,opt,name=creatorAvatar,proto3" json:"creatorAvatar,omitempty"` // 用户头像
	Label         string  `protobuf:"bytes,15,opt,name=label,proto3" json:"label,omitempty"`                // 标签
	Status        int64   `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`              // 任务状态，1-进行中,0-已爆满
	TweetDetails  string  `protobuf:"bytes,8,opt,name=tweetDetails,proto3" json:"tweetDetails,omitempty"`   // 推特文章详情
	TweetPicture  string  `protobuf:"bytes,9,opt,name=tweetPicture,proto3" json:"tweetPicture,omitempty"`   // 推特文章图片
	AwardBudget   float64 `protobuf:"fixed64,10,opt,name=awardBudget,proto3" json:"awardBudget,omitempty"`  // 奖励预算
	MaxUser       int64   `protobuf:"zigzag64,11,opt,name=maxUser,proto3" json:"maxUser,omitempty"`         // 最大奖励用户数
	AwardAmount   float64 `protobuf:"fixed64,12,opt,name=awardAmount,proto3" json:"awardAmount,omitempty"`  // 奖励金额
	EndTime       string  `protobuf:"bytes,13,opt,name=endTime,proto3" json:"endTime,omitempty"`            // 截止时间
	Accomplish    int64   `protobuf:"zigzag64,14,opt,name=accomplish,proto3" json:"accomplish,omitempty"`   // 已完成人数
	Call          int64   `protobuf:"zigzag64,16,opt,name=call,proto3" json:"call,omitempty"`               // call人数
}

func (x *RePublishTaskBak) Reset() {
	*x = RePublishTaskBak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RePublishTaskBak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RePublishTaskBak) ProtoMessage() {}

func (x *RePublishTaskBak) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RePublishTaskBak.ProtoReflect.Descriptor instead.
func (*RePublishTaskBak) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{3}
}

func (x *RePublishTaskBak) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RePublishTaskBak) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *RePublishTaskBak) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *RePublishTaskBak) GetCreatorName() string {
	if x != nil {
		return x.CreatorName
	}
	return ""
}

func (x *RePublishTaskBak) GetCreatorNick() string {
	if x != nil {
		return x.CreatorNick
	}
	return ""
}

func (x *RePublishTaskBak) GetCreatorAvatar() string {
	if x != nil {
		return x.CreatorAvatar
	}
	return ""
}

func (x *RePublishTaskBak) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *RePublishTaskBak) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RePublishTaskBak) GetTweetDetails() string {
	if x != nil {
		return x.TweetDetails
	}
	return ""
}

func (x *RePublishTaskBak) GetTweetPicture() string {
	if x != nil {
		return x.TweetPicture
	}
	return ""
}

func (x *RePublishTaskBak) GetAwardBudget() float64 {
	if x != nil {
		return x.AwardBudget
	}
	return 0
}

func (x *RePublishTaskBak) GetMaxUser() int64 {
	if x != nil {
		return x.MaxUser
	}
	return 0
}

func (x *RePublishTaskBak) GetAwardAmount() float64 {
	if x != nil {
		return x.AwardAmount
	}
	return 0
}

func (x *RePublishTaskBak) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *RePublishTaskBak) GetAccomplish() int64 {
	if x != nil {
		return x.Accomplish
	}
	return 0
}

func (x *RePublishTaskBak) GetCall() int64 {
	if x != nil {
		return x.Call
	}
	return 0
}

// 查询策展任务输入
type PublishTaskInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`     // 筛选，0-已结束，1-进行中
	CurrPage int64 `protobuf:"varint,2,opt,name=currPage,proto3" json:"currPage,omitempty"` // 当前页面
	MaxNum   int64 `protobuf:"varint,3,opt,name=maxNum,proto3" json:"maxNum,omitempty"`     // 最大输出数
}

func (x *PublishTaskInput) Reset() {
	*x = PublishTaskInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishTaskInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishTaskInput) ProtoMessage() {}

func (x *PublishTaskInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishTaskInput.ProtoReflect.Descriptor instead.
func (*PublishTaskInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{4}
}

func (x *PublishTaskInput) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PublishTaskInput) GetCurrPage() int64 {
	if x != nil {
		return x.CurrPage
	}
	return 0
}

func (x *PublishTaskInput) GetMaxNum() int64 {
	if x != nil {
		return x.MaxNum
	}
	return 0
}

// 查询任务详情入参
type TaskDetailsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"` // 任务ID
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"` // 用户ID
}

func (x *TaskDetailsInput) Reset() {
	*x = TaskDetailsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDetailsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDetailsInput) ProtoMessage() {}

func (x *TaskDetailsInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDetailsInput.ProtoReflect.Descriptor instead.
func (*TaskDetailsInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{5}
}

func (x *TaskDetailsInput) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskDetailsInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 任务详情返回
type ReTaskDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RePublishTaskSrt *RePublishTaskBak `protobuf:"bytes,1,opt,name=rePublishTaskSrt,proto3" json:"rePublishTaskSrt,omitempty"` // 策展任务信息
	Participant      []*ParticipantBak `protobuf:"bytes,2,rep,name=participant,proto3" json:"participant,omitempty"`           // 策展任务参与者列表
}

func (x *ReTaskDetails) Reset() {
	*x = ReTaskDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReTaskDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReTaskDetails) ProtoMessage() {}

func (x *ReTaskDetails) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReTaskDetails.ProtoReflect.Descriptor instead.
func (*ReTaskDetails) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{6}
}

func (x *ReTaskDetails) GetRePublishTaskSrt() *RePublishTaskBak {
	if x != nil {
		return x.RePublishTaskSrt
	}
	return nil
}

func (x *ReTaskDetails) GetParticipant() []*ParticipantBak {
	if x != nil {
		return x.Participant
	}
	return nil
}

// ParticipantBak 策展任务参与者列表返回
type ParticipantBak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64   `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`                       // 任务ID
	CreatedAt     string  `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`         // 创建时间
	UserId        string  `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                // 用户ID
	TaskId        string  `protobuf:"bytes,8,opt,name=taskId,proto3" json:"taskId,omitempty"`                // 任务ID
	UserName      string  `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`            // 用户账户
	NickName      string  `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName,omitempty"`            // 用户昵称
	Avatar        string  `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                // 照片地址
	AwardAmount   float64 `protobuf:"fixed64,5,opt,name=awardAmount,proto3" json:"awardAmount,omitempty"`    // 奖励金额
	Accomplish    int64   `protobuf:"varint,6,opt,name=accomplish,proto3" json:"accomplish,omitempty"`       // 已点击人数
	TaskPersonnel int64   `protobuf:"varint,7,opt,name=taskPersonnel,proto3" json:"taskPersonnel,omitempty"` // 任务要求人数
}

func (x *ParticipantBak) Reset() {
	*x = ParticipantBak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantBak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantBak) ProtoMessage() {}

func (x *ParticipantBak) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantBak.ProtoReflect.Descriptor instead.
func (*ParticipantBak) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{7}
}

func (x *ParticipantBak) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ParticipantBak) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ParticipantBak) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ParticipantBak) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ParticipantBak) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ParticipantBak) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *ParticipantBak) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ParticipantBak) GetAwardAmount() float64 {
	if x != nil {
		return x.AwardAmount
	}
	return 0
}

func (x *ParticipantBak) GetAccomplish() int64 {
	if x != nil {
		return x.Accomplish
	}
	return 0
}

func (x *ParticipantBak) GetTaskPersonnel() int64 {
	if x != nil {
		return x.TaskPersonnel
	}
	return 0
}

// 分页数据格式
type PaginationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`                    // 数据总量
	Page    int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                      // 当前页码
	PerPage int64 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"` // 约束的最大数据量
}

func (x *PaginationData) Reset() {
	*x = PaginationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationData) ProtoMessage() {}

func (x *PaginationData) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationData.ProtoReflect.Descriptor instead.
func (*PaginationData) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{8}
}

func (x *PaginationData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PaginationData) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationData) GetPerPage() int64 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// 查询个人发起任务列表+参与任务入参
type UserLaunchTaskListInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`      // 用户ID
	CurrPage int64  `protobuf:"varint,2,opt,name=currPage,proto3" json:"currPage,omitempty"` // 当前页面
	MaxNum   int64  `protobuf:"varint,3,opt,name=maxNum,proto3" json:"maxNum,omitempty"`     // 最大输出数
	Status   int64  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`     // 查询状态，1-个人发起任务列表，2-个人参与任务列表
}

func (x *UserLaunchTaskListInput) Reset() {
	*x = UserLaunchTaskListInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLaunchTaskListInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLaunchTaskListInput) ProtoMessage() {}

func (x *UserLaunchTaskListInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLaunchTaskListInput.ProtoReflect.Descriptor instead.
func (*UserLaunchTaskListInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{9}
}

func (x *UserLaunchTaskListInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserLaunchTaskListInput) GetCurrPage() int64 {
	if x != nil {
		return x.CurrPage
	}
	return 0
}

func (x *UserLaunchTaskListInput) GetMaxNum() int64 {
	if x != nil {
		return x.MaxNum
	}
	return 0
}

func (x *UserLaunchTaskListInput) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

// TaskID入参
type TaskIDInquireInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"` // 标签ID
}

func (x *TaskIDInquireInput) Reset() {
	*x = TaskIDInquireInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIDInquireInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIDInquireInput) ProtoMessage() {}

func (x *TaskIDInquireInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIDInquireInput.ProtoReflect.Descriptor instead.
func (*TaskIDInquireInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{10}
}

func (x *TaskIDInquireInput) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// UserID入参
type UserIDInquireInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` // 用戶ID
}

func (x *UserIDInquireInput) Reset() {
	*x = UserIDInquireInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIDInquireInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIDInquireInput) ProtoMessage() {}

func (x *UserIDInquireInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIDInquireInput.ProtoReflect.Descriptor instead.
func (*UserIDInquireInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{11}
}

func (x *UserIDInquireInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 创建宝箱样式+编辑宝箱样式进参
type TreasureTaskSrtInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreasureId        string               `protobuf:"bytes,1,opt,name=treasureId,proto3" json:"treasureId,omitempty"`               // 宝箱ID
	Name              string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                           // 任务名称
	DemandIntegral    int64                `protobuf:"varint,3,opt,name=demandIntegral,proto3" json:"demandIntegral,omitempty"`      // 任务需求积分
	ExperienceReward  int64                `protobuf:"varint,5,opt,name=experienceReward,proto3" json:"experienceReward,omitempty"`  // 经验奖励（用于校验阶段总奖励）
	RewardQuantity    int64                `protobuf:"varint,6,opt,name=rewardQuantity,proto3" json:"rewardQuantity,omitempty"`      // 奖励个数（宝箱个数）
	TreasureTaskStage []*TreasureTaskStage `protobuf:"bytes,7,rep,name=treasureTaskStage,proto3" json:"treasureTaskStage,omitempty"` // 宝箱阶段
}

func (x *TreasureTaskSrtInput) Reset() {
	*x = TreasureTaskSrtInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureTaskSrtInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureTaskSrtInput) ProtoMessage() {}

func (x *TreasureTaskSrtInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureTaskSrtInput.ProtoReflect.Descriptor instead.
func (*TreasureTaskSrtInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{12}
}

func (x *TreasureTaskSrtInput) GetTreasureId() string {
	if x != nil {
		return x.TreasureId
	}
	return ""
}

func (x *TreasureTaskSrtInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TreasureTaskSrtInput) GetDemandIntegral() int64 {
	if x != nil {
		return x.DemandIntegral
	}
	return 0
}

func (x *TreasureTaskSrtInput) GetExperienceReward() int64 {
	if x != nil {
		return x.ExperienceReward
	}
	return 0
}

func (x *TreasureTaskSrtInput) GetRewardQuantity() int64 {
	if x != nil {
		return x.RewardQuantity
	}
	return 0
}

func (x *TreasureTaskSrtInput) GetTreasureTaskStage() []*TreasureTaskStage {
	if x != nil {
		return x.TreasureTaskStage
	}
	return nil
}

// 宝箱阶段
type TreasureTaskStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               int64  `protobuf:"varint,1,opt,name=iD,proto3" json:"iD,omitempty"`
	Treasure         string `protobuf:"bytes,2,opt,name=treasure,proto3" json:"treasure,omitempty"`                  // 宝箱ID
	TreasureSequence int64  `protobuf:"varint,3,opt,name=treasureSequence,proto3" json:"treasureSequence,omitempty"` // 宝箱阶段序号
	StageExperience  int64  `protobuf:"varint,4,opt,name=stageExperience,proto3" json:"stageExperience,omitempty"`   // 阶段经验
	StageReward      int64  `protobuf:"varint,5,opt,name=stageReward,proto3" json:"stageReward,omitempty"`           // 阶段奖励
}

func (x *TreasureTaskStage) Reset() {
	*x = TreasureTaskStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureTaskStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureTaskStage) ProtoMessage() {}

func (x *TreasureTaskStage) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureTaskStage.ProtoReflect.Descriptor instead.
func (*TreasureTaskStage) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{13}
}

func (x *TreasureTaskStage) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TreasureTaskStage) GetTreasure() string {
	if x != nil {
		return x.Treasure
	}
	return ""
}

func (x *TreasureTaskStage) GetTreasureSequence() int64 {
	if x != nil {
		return x.TreasureSequence
	}
	return 0
}

func (x *TreasureTaskStage) GetStageExperience() int64 {
	if x != nil {
		return x.StageExperience
	}
	return 0
}

func (x *TreasureTaskStage) GetStageReward() int64 {
	if x != nil {
		return x.StageReward
	}
	return 0
}

// 上架+删除宝箱样式
type TreasureTaskInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreasureId string `protobuf:"bytes,1,opt,name=treasureId,proto3" json:"treasureId,omitempty"` // 宝箱ID
	Status     int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`        // 更新状态，0-删除，1-上架
}

func (x *TreasureTaskInput) Reset() {
	*x = TreasureTaskInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureTaskInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureTaskInput) ProtoMessage() {}

func (x *TreasureTaskInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureTaskInput.ProtoReflect.Descriptor instead.
func (*TreasureTaskInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{14}
}

func (x *TreasureTaskInput) GetTreasureId() string {
	if x != nil {
		return x.TreasureId
	}
	return ""
}

func (x *TreasureTaskInput) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 宝箱样式返回结构体
type ReTreasureTaskSrt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationData       *PaginationData         `protobuf:"bytes,1,opt,name=paginationData,proto3" json:"paginationData,omitempty"`             // 分页数据
	TreasureTaskSrtInput []*TreasureTaskSrtInput `protobuf:"bytes,2,rep,name=treasureTaskSrtInput,proto3" json:"treasureTaskSrtInput,omitempty"` // 宝箱样式返回结构体
}

func (x *ReTreasureTaskSrt) Reset() {
	*x = ReTreasureTaskSrt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReTreasureTaskSrt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReTreasureTaskSrt) ProtoMessage() {}

func (x *ReTreasureTaskSrt) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReTreasureTaskSrt.ProtoReflect.Descriptor instead.
func (*ReTreasureTaskSrt) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{15}
}

func (x *ReTreasureTaskSrt) GetPaginationData() *PaginationData {
	if x != nil {
		return x.PaginationData
	}
	return nil
}

func (x *ReTreasureTaskSrt) GetTreasureTaskSrtInput() []*TreasureTaskSrtInput {
	if x != nil {
		return x.TreasureTaskSrtInput
	}
	return nil
}

// 子样式列表返回数据
type ReSubtaskStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubtaskStyle []*SubtaskStyle `protobuf:"bytes,1,rep,name=subtaskStyle,proto3" json:"subtaskStyle,omitempty"`
}

func (x *ReSubtaskStyle) Reset() {
	*x = ReSubtaskStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReSubtaskStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReSubtaskStyle) ProtoMessage() {}

func (x *ReSubtaskStyle) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReSubtaskStyle.ProtoReflect.Descriptor instead.
func (*ReSubtaskStyle) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{16}
}

func (x *ReSubtaskStyle) GetSubtaskStyle() []*SubtaskStyle {
	if x != nil {
		return x.SubtaskStyle
	}
	return nil
}

// 子样式返回结构体
type SubtaskStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         int64  `protobuf:"varint,1,opt,name=taskId,proto3" json:"taskId,omitempty"`                // 任务ID
	TaskName       string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`             // 任务名称（中）
	TaskNameEng    string `protobuf:"bytes,3,opt,name=taskNameEng,proto3" json:"taskNameEng,omitempty"`       // 任务名称(英)
	TaskDetails    string `protobuf:"bytes,4,opt,name=taskDetails,proto3" json:"taskDetails,omitempty"`       // 任务详情描述(中)
	TaskDetailsEng string `protobuf:"bytes,5,opt,name=taskDetailsEng,proto3" json:"taskDetailsEng,omitempty"` // 任务详情描述(英)
	TaskStatus     int64  `protobuf:"varint,6,opt,name=taskStatus,proto3" json:"taskStatus,omitempty"`        // 任务类型，0-站内，1-站外
}

func (x *SubtaskStyle) Reset() {
	*x = SubtaskStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtaskStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtaskStyle) ProtoMessage() {}

func (x *SubtaskStyle) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtaskStyle.ProtoReflect.Descriptor instead.
func (*SubtaskStyle) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{17}
}

func (x *SubtaskStyle) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *SubtaskStyle) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *SubtaskStyle) GetTaskNameEng() string {
	if x != nil {
		return x.TaskNameEng
	}
	return ""
}

func (x *SubtaskStyle) GetTaskDetails() string {
	if x != nil {
		return x.TaskDetails
	}
	return ""
}

func (x *SubtaskStyle) GetTaskDetailsEng() string {
	if x != nil {
		return x.TaskDetailsEng
	}
	return ""
}

func (x *SubtaskStyle) GetTaskStatus() int64 {
	if x != nil {
		return x.TaskStatus
	}
	return 0
}

// AssociatedSubtaskSrt 关联子任务
type AssociatedSubtaskSrt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubtaskId      int64  `protobuf:"varint,14,opt,name=subtaskId,proto3" json:"subtaskId,omitempty"`         // 关联子任务ID
	TaskId         string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`                 // 子任务ID
	TreasureId     string `protobuf:"bytes,2,opt,name=treasureId,proto3" json:"treasureId,omitempty"`         // 宝箱ID
	TaskName       string `protobuf:"bytes,3,opt,name=taskName,proto3" json:"taskName,omitempty"`             // 子任务名称（中）
	TaskNameEng    string `protobuf:"bytes,4,opt,name=taskNameEng,proto3" json:"taskNameEng,omitempty"`       // 子任务名称(英)
	TaskDetails    string `protobuf:"bytes,5,opt,name=taskDetails,proto3" json:"taskDetails,omitempty"`       // 子任务详情描述（中）
	TaskDetailsEng string `protobuf:"bytes,6,opt,name=taskDetailsEng,proto3" json:"taskDetailsEng,omitempty"` // 子任务详情描述(英)
	TaskStatus     int64  `protobuf:"varint,7,opt,name=taskStatus,proto3" json:"taskStatus,omitempty"`        // 任务状态，0-站内，1-站外
	Reward         int64  `protobuf:"varint,8,opt,name=reward,proto3" json:"reward,omitempty"`                // 奖励
	Experience     int64  `protobuf:"varint,9,opt,name=experience,proto3" json:"experience,omitempty"`        // 经验
	Number         int64  `protobuf:"varint,10,opt,name=number,proto3" json:"number,omitempty"`               // 需求数量
	Article        string `protobuf:"bytes,11,opt,name=article,proto3" json:"article,omitempty"`              // 站外文案
	Link           string `protobuf:"bytes,12,opt,name=link,proto3" json:"link,omitempty"`                    // 跳转链接
	Label          string `protobuf:"bytes,13,opt,name=label,proto3" json:"label,omitempty"`                  // 标签
}

func (x *AssociatedSubtaskSrt) Reset() {
	*x = AssociatedSubtaskSrt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociatedSubtaskSrt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociatedSubtaskSrt) ProtoMessage() {}

func (x *AssociatedSubtaskSrt) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociatedSubtaskSrt.ProtoReflect.Descriptor instead.
func (*AssociatedSubtaskSrt) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{18}
}

func (x *AssociatedSubtaskSrt) GetSubtaskId() int64 {
	if x != nil {
		return x.SubtaskId
	}
	return 0
}

func (x *AssociatedSubtaskSrt) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AssociatedSubtaskSrt) GetTreasureId() string {
	if x != nil {
		return x.TreasureId
	}
	return ""
}

func (x *AssociatedSubtaskSrt) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *AssociatedSubtaskSrt) GetTaskNameEng() string {
	if x != nil {
		return x.TaskNameEng
	}
	return ""
}

func (x *AssociatedSubtaskSrt) GetTaskDetails() string {
	if x != nil {
		return x.TaskDetails
	}
	return ""
}

func (x *AssociatedSubtaskSrt) GetTaskDetailsEng() string {
	if x != nil {
		return x.TaskDetailsEng
	}
	return ""
}

func (x *AssociatedSubtaskSrt) GetTaskStatus() int64 {
	if x != nil {
		return x.TaskStatus
	}
	return 0
}

func (x *AssociatedSubtaskSrt) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *AssociatedSubtaskSrt) GetExperience() int64 {
	if x != nil {
		return x.Experience
	}
	return 0
}

func (x *AssociatedSubtaskSrt) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *AssociatedSubtaskSrt) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *AssociatedSubtaskSrt) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *AssociatedSubtaskSrt) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// 关联子任务返回列表
type ReAssociatedSubtask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssociatedSubtask []*AssociatedSubtask `protobuf:"bytes,1,rep,name=associatedSubtask,proto3" json:"associatedSubtask,omitempty"`
}

func (x *ReAssociatedSubtask) Reset() {
	*x = ReAssociatedSubtask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReAssociatedSubtask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReAssociatedSubtask) ProtoMessage() {}

func (x *ReAssociatedSubtask) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReAssociatedSubtask.ProtoReflect.Descriptor instead.
func (*ReAssociatedSubtask) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{19}
}

func (x *ReAssociatedSubtask) GetAssociatedSubtask() []*AssociatedSubtask {
	if x != nil {
		return x.AssociatedSubtask
	}
	return nil
}

// AssociatedSubtask 关联子任务
type AssociatedSubtask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubtaskId      string `protobuf:"bytes,14,opt,name=subtaskId,proto3" json:"subtaskId,omitempty"`          // 任务样式ID
	TaskId         string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`                 // 任务ID
	TaskName       string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`             // 任务名称（中）
	TaskNameEng    string `protobuf:"bytes,3,opt,name=taskNameEng,proto3" json:"taskNameEng,omitempty"`       // 任务名称(英)
	TaskDetails    string `protobuf:"bytes,4,opt,name=taskDetails,proto3" json:"taskDetails,omitempty"`       // 任务详情描述（中）
	TaskDetailsEng string `protobuf:"bytes,5,opt,name=taskDetailsEng,proto3" json:"taskDetailsEng,omitempty"` // 任务详情描述(英)
	TaskStatus     int64  `protobuf:"varint,6,opt,name=taskStatus,proto3" json:"taskStatus,omitempty"`        // 任务类型，0-站内，1-站外
	Reward         int64  `protobuf:"varint,7,opt,name=reward,proto3" json:"reward,omitempty"`                // 奖励
	Experience     int64  `protobuf:"varint,8,opt,name=experience,proto3" json:"experience,omitempty"`        // 经验
	Number         int64  `protobuf:"varint,9,opt,name=number,proto3" json:"number,omitempty"`                // 需求数量
	Article        string `protobuf:"bytes,10,opt,name=article,proto3" json:"article,omitempty"`              // 站外文案
	Link           string `protobuf:"bytes,11,opt,name=link,proto3" json:"link,omitempty"`                    // 调转链接
	Label          string `protobuf:"bytes,12,opt,name=label,proto3" json:"label,omitempty"`                  // 标签
	TreasureId     string `protobuf:"bytes,13,opt,name=treasureId,proto3" json:"treasureId,omitempty"`        // 宝箱ID
}

func (x *AssociatedSubtask) Reset() {
	*x = AssociatedSubtask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociatedSubtask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociatedSubtask) ProtoMessage() {}

func (x *AssociatedSubtask) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociatedSubtask.ProtoReflect.Descriptor instead.
func (*AssociatedSubtask) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{20}
}

func (x *AssociatedSubtask) GetSubtaskId() string {
	if x != nil {
		return x.SubtaskId
	}
	return ""
}

func (x *AssociatedSubtask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AssociatedSubtask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *AssociatedSubtask) GetTaskNameEng() string {
	if x != nil {
		return x.TaskNameEng
	}
	return ""
}

func (x *AssociatedSubtask) GetTaskDetails() string {
	if x != nil {
		return x.TaskDetails
	}
	return ""
}

func (x *AssociatedSubtask) GetTaskDetailsEng() string {
	if x != nil {
		return x.TaskDetailsEng
	}
	return ""
}

func (x *AssociatedSubtask) GetTaskStatus() int64 {
	if x != nil {
		return x.TaskStatus
	}
	return 0
}

func (x *AssociatedSubtask) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *AssociatedSubtask) GetExperience() int64 {
	if x != nil {
		return x.Experience
	}
	return 0
}

func (x *AssociatedSubtask) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *AssociatedSubtask) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *AssociatedSubtask) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *AssociatedSubtask) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AssociatedSubtask) GetTreasureId() string {
	if x != nil {
		return x.TreasureId
	}
	return ""
}

// 创建宝箱领取度+更新宝箱领取进度入参
type AmendChestCollectionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`  // 用户ID
	Amount int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"` // 积分数量
}

func (x *AmendChestCollectionInput) Reset() {
	*x = AmendChestCollectionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmendChestCollectionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmendChestCollectionInput) ProtoMessage() {}

func (x *AmendChestCollectionInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmendChestCollectionInput.ProtoReflect.Descriptor instead.
func (*AmendChestCollectionInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{21}
}

func (x *AmendChestCollectionInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AmendChestCollectionInput) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// ReChestCollectionSrt 宝箱进度返回数据
type ReChestCollectionSrt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string                   `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                       // 用户ID
	DemandIntegral    int64                    `protobuf:"varint,2,opt,name=demandIntegral,proto3" json:"demandIntegral,omitempty"`      // 宝箱需要总经验
	ChestAmount       int64                    `protobuf:"varint,3,opt,name=chestAmount,proto3" json:"chestAmount,omitempty"`            // 宝箱领取经验值
	RewardQuantity    int64                    `protobuf:"varint,4,opt,name=rewardQuantity,proto3" json:"rewardQuantity,omitempty"`      // 奖励个数（宝箱个数）
	TreasureTaskStage []*TreasureTaskStageSeed `protobuf:"bytes,5,rep,name=treasureTaskStage,proto3" json:"treasureTaskStage,omitempty"` // 宝箱阶段
	AssociatedSubtask []*AssociatedSubtaskSeed `protobuf:"bytes,6,rep,name=associatedSubtask,proto3" json:"associatedSubtask,omitempty"` // 关联子任务
}

func (x *ReChestCollectionSrt) Reset() {
	*x = ReChestCollectionSrt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReChestCollectionSrt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReChestCollectionSrt) ProtoMessage() {}

func (x *ReChestCollectionSrt) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReChestCollectionSrt.ProtoReflect.Descriptor instead.
func (*ReChestCollectionSrt) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{22}
}

func (x *ReChestCollectionSrt) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReChestCollectionSrt) GetDemandIntegral() int64 {
	if x != nil {
		return x.DemandIntegral
	}
	return 0
}

func (x *ReChestCollectionSrt) GetChestAmount() int64 {
	if x != nil {
		return x.ChestAmount
	}
	return 0
}

func (x *ReChestCollectionSrt) GetRewardQuantity() int64 {
	if x != nil {
		return x.RewardQuantity
	}
	return 0
}

func (x *ReChestCollectionSrt) GetTreasureTaskStage() []*TreasureTaskStageSeed {
	if x != nil {
		return x.TreasureTaskStage
	}
	return nil
}

func (x *ReChestCollectionSrt) GetAssociatedSubtask() []*AssociatedSubtaskSeed {
	if x != nil {
		return x.AssociatedSubtask
	}
	return nil
}

// TreasureTaskStageSrt 宝箱阶段子样式
type TreasureTaskStageSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Treasure         string  `protobuf:"bytes,1,opt,name=treasure,proto3" json:"treasure,omitempty"`                  // 宝箱ID
	TreasureSequence int64   `protobuf:"varint,2,opt,name=treasureSequence,proto3" json:"treasureSequence,omitempty"` // 宝箱阶段序号
	StageExperience  int64   `protobuf:"varint,3,opt,name=stageExperience,proto3" json:"stageExperience,omitempty"`   // 阶段经验
	TreasureRatio    float64 `protobuf:"fixed64,4,opt,name=treasureRatio,proto3" json:"treasureRatio,omitempty"`      // 宝箱比例
	StageReward      int64   `protobuf:"varint,5,opt,name=stageReward,proto3" json:"stageReward,omitempty"`           // 阶段奖励
}

func (x *TreasureTaskStageSeed) Reset() {
	*x = TreasureTaskStageSeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureTaskStageSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureTaskStageSeed) ProtoMessage() {}

func (x *TreasureTaskStageSeed) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureTaskStageSeed.ProtoReflect.Descriptor instead.
func (*TreasureTaskStageSeed) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{23}
}

func (x *TreasureTaskStageSeed) GetTreasure() string {
	if x != nil {
		return x.Treasure
	}
	return ""
}

func (x *TreasureTaskStageSeed) GetTreasureSequence() int64 {
	if x != nil {
		return x.TreasureSequence
	}
	return 0
}

func (x *TreasureTaskStageSeed) GetStageExperience() int64 {
	if x != nil {
		return x.StageExperience
	}
	return 0
}

func (x *TreasureTaskStageSeed) GetTreasureRatio() float64 {
	if x != nil {
		return x.TreasureRatio
	}
	return 0
}

func (x *TreasureTaskStageSeed) GetStageReward() int64 {
	if x != nil {
		return x.StageReward
	}
	return 0
}

// AssociatedSubtask 关联子任务子样式
type AssociatedSubtaskSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64 `protobuf:"varint,15,opt,name=id,proto3" json:"id,omitempty"`                       // 子任务ID
	TreasureId     string `protobuf:"bytes,1,opt,name=treasureId,proto3" json:"treasureId,omitempty"`         // 宝箱ID
	TaskId         string `protobuf:"bytes,2,opt,name=taskId,proto3" json:"taskId,omitempty"`                 // 任务ID
	TaskName       string `protobuf:"bytes,3,opt,name=taskName,proto3" json:"taskName,omitempty"`             // 任务名称（中）
	TaskNameEng    string `protobuf:"bytes,4,opt,name=taskNameEng,proto3" json:"taskNameEng,omitempty"`       // 任务名称(英)
	TaskDetails    string `protobuf:"bytes,5,opt,name=taskDetails,proto3" json:"taskDetails,omitempty"`       // 任务详情描述（中）
	TaskDetailsEng string `protobuf:"bytes,6,opt,name=taskDetailsEng,proto3" json:"taskDetailsEng,omitempty"` // 任务详情描述(英)
	TaskStatus     int64  `protobuf:"varint,7,opt,name=taskStatus,proto3" json:"taskStatus,omitempty"`        // 任务状态，0-站内，2-站外
	Reward         int64  `protobuf:"varint,8,opt,name=reward,proto3" json:"reward,omitempty"`                // 奖励
	Experience     int64  `protobuf:"varint,9,opt,name=experience,proto3" json:"experience,omitempty"`        // 经验
	Number         int64  `protobuf:"varint,10,opt,name=number,proto3" json:"number,omitempty"`               // 需求数量
	Article        string `protobuf:"bytes,11,opt,name=article,proto3" json:"article,omitempty"`              // 站外文案
	Link           string `protobuf:"bytes,12,opt,name=Link,proto3" json:"Link,omitempty"`                    // 调转链接
	Label          string `protobuf:"bytes,13,opt,name=Label,proto3" json:"Label,omitempty"`                  // 标签
	Complete       int64  `protobuf:"varint,14,opt,name=complete,proto3" json:"complete,omitempty"`           // 任务完成度，数量
}

func (x *AssociatedSubtaskSeed) Reset() {
	*x = AssociatedSubtaskSeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociatedSubtaskSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociatedSubtaskSeed) ProtoMessage() {}

func (x *AssociatedSubtaskSeed) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociatedSubtaskSeed.ProtoReflect.Descriptor instead.
func (*AssociatedSubtaskSeed) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{24}
}

func (x *AssociatedSubtaskSeed) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssociatedSubtaskSeed) GetTreasureId() string {
	if x != nil {
		return x.TreasureId
	}
	return ""
}

func (x *AssociatedSubtaskSeed) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AssociatedSubtaskSeed) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *AssociatedSubtaskSeed) GetTaskNameEng() string {
	if x != nil {
		return x.TaskNameEng
	}
	return ""
}

func (x *AssociatedSubtaskSeed) GetTaskDetails() string {
	if x != nil {
		return x.TaskDetails
	}
	return ""
}

func (x *AssociatedSubtaskSeed) GetTaskDetailsEng() string {
	if x != nil {
		return x.TaskDetailsEng
	}
	return ""
}

func (x *AssociatedSubtaskSeed) GetTaskStatus() int64 {
	if x != nil {
		return x.TaskStatus
	}
	return 0
}

func (x *AssociatedSubtaskSeed) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *AssociatedSubtaskSeed) GetExperience() int64 {
	if x != nil {
		return x.Experience
	}
	return 0
}

func (x *AssociatedSubtaskSeed) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *AssociatedSubtaskSeed) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *AssociatedSubtaskSeed) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *AssociatedSubtaskSeed) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AssociatedSubtaskSeed) GetComplete() int64 {
	if x != nil {
		return x.Complete
	}
	return 0
}

// CreateUserPowerTask 创建用户助力信息
type CreateUserPowerTaskInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishesUserId string `protobuf:"bytes,1,opt,name=publishesUserId,proto3" json:"publishesUserId,omitempty"` // 发布用户ID
	HelperUserId    string `protobuf:"bytes,2,opt,name=helperUserId,proto3" json:"helperUserId,omitempty"`       // 助力用户ID
}

func (x *CreateUserPowerTaskInput) Reset() {
	*x = CreateUserPowerTaskInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserPowerTaskInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserPowerTaskInput) ProtoMessage() {}

func (x *CreateUserPowerTaskInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserPowerTaskInput.ProtoReflect.Descriptor instead.
func (*CreateUserPowerTaskInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{25}
}

func (x *CreateUserPowerTaskInput) GetPublishesUserId() string {
	if x != nil {
		return x.PublishesUserId
	}
	return ""
}

func (x *CreateUserPowerTaskInput) GetHelperUserId() string {
	if x != nil {
		return x.HelperUserId
	}
	return ""
}

// TreasureTaskListInput 查询+搜索宝箱样式列表入参
type TreasureTaskListInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`          // 宝箱名称
	Reward   int64  `protobuf:"varint,2,opt,name=reward,proto3" json:"reward,omitempty"`     // 奖励数量
	CurrPage int64  `protobuf:"varint,3,opt,name=currPage,proto3" json:"currPage,omitempty"` // 当前页面
	MaxNum   int64  `protobuf:"varint,4,opt,name=maxNum,proto3" json:"maxNum,omitempty"`     // 最大输出数
}

func (x *TreasureTaskListInput) Reset() {
	*x = TreasureTaskListInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureTaskListInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureTaskListInput) ProtoMessage() {}

func (x *TreasureTaskListInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureTaskListInput.ProtoReflect.Descriptor instead.
func (*TreasureTaskListInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{26}
}

func (x *TreasureTaskListInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TreasureTaskListInput) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *TreasureTaskListInput) GetCurrPage() int64 {
	if x != nil {
		return x.CurrPage
	}
	return 0
}

func (x *TreasureTaskListInput) GetMaxNum() int64 {
	if x != nil {
		return x.MaxNum
	}
	return 0
}

// CreateUserPublishingAssistanceTaskInput 创建用户发布助力任务
type CreateUserPublishingAssistanceTaskInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Avatar   string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *CreateUserPublishingAssistanceTaskInput) Reset() {
	*x = CreateUserPublishingAssistanceTaskInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserPublishingAssistanceTaskInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserPublishingAssistanceTaskInput) ProtoMessage() {}

func (x *CreateUserPublishingAssistanceTaskInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserPublishingAssistanceTaskInput.ProtoReflect.Descriptor instead.
func (*CreateUserPublishingAssistanceTaskInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{27}
}

func (x *CreateUserPublishingAssistanceTaskInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateUserPublishingAssistanceTaskInput) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CreateUserPublishingAssistanceTaskInput) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

// QueryUserPublishingAssistanceTask 查询用户发布助力信息
type UserPublishingAssistanceTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CreatedAt string `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UserId    string `protobuf:"bytes,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName  string `protobuf:"bytes,4,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Avatar    string `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (x *UserPublishingAssistanceTask) Reset() {
	*x = UserPublishingAssistanceTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPublishingAssistanceTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPublishingAssistanceTask) ProtoMessage() {}

func (x *UserPublishingAssistanceTask) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPublishingAssistanceTask.ProtoReflect.Descriptor instead.
func (*UserPublishingAssistanceTask) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{28}
}

func (x *UserPublishingAssistanceTask) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UserPublishingAssistanceTask) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UserPublishingAssistanceTask) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserPublishingAssistanceTask) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserPublishingAssistanceTask) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

// CompleteDailyTasksInput 完成每日任务
type CompleteDailyTasksInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	TaskName string `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
}

func (x *CompleteDailyTasksInput) Reset() {
	*x = CompleteDailyTasksInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteDailyTasksInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteDailyTasksInput) ProtoMessage() {}

func (x *CompleteDailyTasksInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteDailyTasksInput.ProtoReflect.Descriptor instead.
func (*CompleteDailyTasksInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{29}
}

func (x *CompleteDailyTasksInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CompleteDailyTasksInput) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

// 创建标签入参
type CreateLabelInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` // 用户ID
	Label  string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`   // 标签信息
}

func (x *CreateLabelInput) Reset() {
	*x = CreateLabelInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLabelInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLabelInput) ProtoMessage() {}

func (x *CreateLabelInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLabelInput.ProtoReflect.Descriptor instead.
func (*CreateLabelInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{30}
}

func (x *CreateLabelInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateLabelInput) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// ReLabelListOut 标签返回结果体
type ReLabelListOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReLabelList []*ReLabelList `protobuf:"bytes,1,rep,name=reLabelList,proto3" json:"reLabelList,omitempty"`
}

func (x *ReLabelListOut) Reset() {
	*x = ReLabelListOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReLabelListOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReLabelListOut) ProtoMessage() {}

func (x *ReLabelListOut) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReLabelListOut.ProtoReflect.Descriptor instead.
func (*ReLabelListOut) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{31}
}

func (x *ReLabelListOut) GetReLabelList() []*ReLabelList {
	if x != nil {
		return x.ReLabelList
	}
	return nil
}

// 获取标签列表出参
type ReLabelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"` // 创建者
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"` // 内容
}

func (x *ReLabelList) Reset() {
	*x = ReLabelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReLabelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReLabelList) ProtoMessage() {}

func (x *ReLabelList) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReLabelList.ProtoReflect.Descriptor instead.
func (*ReLabelList) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{32}
}

func (x *ReLabelList) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReLabelList) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ReLabelList) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// TaskID入参
type LabelInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelId int64 `protobuf:"varint,1,opt,name=labelId,proto3" json:"labelId,omitempty"` // 标签ID
}

func (x *LabelInput) Reset() {
	*x = LabelInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelInput) ProtoMessage() {}

func (x *LabelInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelInput.ProtoReflect.Descriptor instead.
func (*LabelInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{33}
}

func (x *LabelInput) GetLabelId() int64 {
	if x != nil {
		return x.LabelId
	}
	return 0
}

// 参与任务入参
type ParticipatingTaskInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	NickName string `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Avatar   string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	TaskID   string `protobuf:"bytes,5,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *ParticipatingTaskInput) Reset() {
	*x = ParticipatingTaskInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipatingTaskInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipatingTaskInput) ProtoMessage() {}

func (x *ParticipatingTaskInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipatingTaskInput.ProtoReflect.Descriptor instead.
func (*ParticipatingTaskInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{34}
}

func (x *ParticipatingTaskInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ParticipatingTaskInput) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ParticipatingTaskInput) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *ParticipatingTaskInput) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ParticipatingTaskInput) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

// 任务call入参
type TaskCallInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Sharer string `protobuf:"bytes,2,opt,name=sharer,proto3" json:"sharer,omitempty"`
	TaskID string `protobuf:"bytes,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *TaskCallInput) Reset() {
	*x = TaskCallInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCallInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCallInput) ProtoMessage() {}

func (x *TaskCallInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCallInput.ProtoReflect.Descriptor instead.
func (*TaskCallInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{35}
}

func (x *TaskCallInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskCallInput) GetSharer() string {
	if x != nil {
		return x.Sharer
	}
	return ""
}

func (x *TaskCallInput) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

// 查询个人发起任务列表+参与任务出参
type UserLaunchTaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator          string          `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`                    // 创建者ID
	CreatorName      string          `protobuf:"bytes,4,opt,name=creatorName,proto3" json:"creatorName,omitempty"`            // 创建者账户
	CreatorNick      string          `protobuf:"bytes,5,opt,name=creatorNick,proto3" json:"creatorNick,omitempty"`            // 创建者昵称
	CreatorAvatar    string          `protobuf:"bytes,6,opt,name=creatorAvatar,proto3" json:"creatorAvatar,omitempty"`        // 用户头像
	LaunchAmount     int64           `protobuf:"varint,7,opt,name=launchAmount,proto3" json:"launchAmount,omitempty"`         // 发起策展数量
	AccomplishAmount int64           `protobuf:"varint,8,opt,name=accomplishAmount,proto3" json:"accomplishAmount,omitempty"` // 完成策展数量
	PaginationData   *PaginationData `protobuf:"bytes,1,opt,name=paginationData,proto3" json:"paginationData,omitempty"`      // 分页信息
	PersonalList     []*PersonalList `protobuf:"bytes,2,rep,name=PersonalList,proto3" json:"PersonalList,omitempty"`          // 列表信息
}

func (x *UserLaunchTaskList) Reset() {
	*x = UserLaunchTaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLaunchTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLaunchTaskList) ProtoMessage() {}

func (x *UserLaunchTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLaunchTaskList.ProtoReflect.Descriptor instead.
func (*UserLaunchTaskList) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{36}
}

func (x *UserLaunchTaskList) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *UserLaunchTaskList) GetCreatorName() string {
	if x != nil {
		return x.CreatorName
	}
	return ""
}

func (x *UserLaunchTaskList) GetCreatorNick() string {
	if x != nil {
		return x.CreatorNick
	}
	return ""
}

func (x *UserLaunchTaskList) GetCreatorAvatar() string {
	if x != nil {
		return x.CreatorAvatar
	}
	return ""
}

func (x *UserLaunchTaskList) GetLaunchAmount() int64 {
	if x != nil {
		return x.LaunchAmount
	}
	return 0
}

func (x *UserLaunchTaskList) GetAccomplishAmount() int64 {
	if x != nil {
		return x.AccomplishAmount
	}
	return 0
}

func (x *UserLaunchTaskList) GetPaginationData() *PaginationData {
	if x != nil {
		return x.PaginationData
	}
	return nil
}

func (x *UserLaunchTaskList) GetPersonalList() []*PersonalList {
	if x != nil {
		return x.PersonalList
	}
	return nil
}

// 返回任务信息
type PersonalList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId       string  `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`             // 任务ID
	CreatedAt    string  `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`       // 创建时间
	Creator      string  `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`           // 创建者ID
	Label        string  `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`               // 标签
	Status       int64   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`            // 任务状态，1-进行中,0-已爆满
	TweetDetails string  `protobuf:"bytes,6,opt,name=tweetDetails,proto3" json:"tweetDetails,omitempty"` // 推特文章详情
	TweetPicture string  `protobuf:"bytes,7,opt,name=tweetPicture,proto3" json:"tweetPicture,omitempty"` // 推特文章图片
	AwardBudget  float64 `protobuf:"fixed64,8,opt,name=awardBudget,proto3" json:"awardBudget,omitempty"` // 奖励预算
	MaxUser      int64   `protobuf:"zigzag64,9,opt,name=maxUser,proto3" json:"maxUser,omitempty"`        // 最大奖励用户数
	Accomplish   int64   `protobuf:"zigzag64,10,opt,name=accomplish,proto3" json:"accomplish,omitempty"` // 已完成人数
}

func (x *PersonalList) Reset() {
	*x = PersonalList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalList) ProtoMessage() {}

func (x *PersonalList) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalList.ProtoReflect.Descriptor instead.
func (*PersonalList) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{37}
}

func (x *PersonalList) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *PersonalList) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *PersonalList) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *PersonalList) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *PersonalList) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PersonalList) GetTweetDetails() string {
	if x != nil {
		return x.TweetDetails
	}
	return ""
}

func (x *PersonalList) GetTweetPicture() string {
	if x != nil {
		return x.TweetPicture
	}
	return ""
}

func (x *PersonalList) GetAwardBudget() float64 {
	if x != nil {
		return x.AwardBudget
	}
	return 0
}

func (x *PersonalList) GetMaxUser() int64 {
	if x != nil {
		return x.MaxUser
	}
	return 0
}

func (x *PersonalList) GetAccomplish() int64 {
	if x != nil {
		return x.Accomplish
	}
	return 0
}

var File_task_proto protoreflect.FileDescriptor

var file_task_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x22, 0x8c, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x77, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x77, 0x65, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x77, 0x65, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x54,
	0x77, 0x65, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x54, 0x77, 0x65, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x22, 0x1b, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x91,
	0x01, 0x0a, 0x0d, 0x52, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x3c, 0x0a, 0x0e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42,
	0x0a, 0x10, 0x72, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x42,
	0x61, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x52, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x6b,
	0x52, 0x10, 0x72, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x42,
	0x61, 0x6b, 0x22, 0xee, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x77, 0x65, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x77, 0x65, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x77, 0x65, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x12, 0x52, 0x04, 0x63,
	0x61, 0x6c, 0x6c, 0x22, 0x5e, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x61, 0x78, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78,
	0x4e, 0x75, 0x6d, 0x22, 0x42, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x6b, 0x52, 0x10, 0x72, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x72, 0x74, 0x12, 0x36, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6b, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0xa6, 0x02, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x55,
	0x0a, 0x0e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x7d, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x2c, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x49, 0x6e,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x8d, 0x02, 0x0a, 0x14, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x11, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x11, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x22, 0xb7, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x4b, 0x0a, 0x11, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x72, 0x74, 0x12, 0x3c, 0x0a,
	0x0e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x14, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x72, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x72, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x14, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x48, 0x0a, 0x0e, 0x52,
	0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x36, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61,
	0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x45, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa8, 0x03, 0x0a, 0x14, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x72, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x22, 0x5c, 0x0a, 0x13, 0x52, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x45, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x11, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x22,
	0xa5, 0x03, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61,
	0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x45, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x19, 0x41, 0x6d, 0x65, 0x6e, 0x64,
	0x43, 0x68, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x43, 0x68, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x68, 0x65, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x65, 0x64, 0x52,
	0x11, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x65, 0x64, 0x52, 0x11, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xd1, 0x01,
	0x0a, 0x15, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x22, 0xb7, 0x03, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x45, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x68, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x15, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x22, 0x75,
	0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x98, 0x01, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x22, 0x4d, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x40, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x22, 0x45, 0x0a, 0x0e, 0x52, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x52, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x0b, 0x52, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x26, 0x0a, 0x0a, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x57,
	0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0xde, 0x02, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x36, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb0, 0x02, 0x0a, 0x0c, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x77, 0x65, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x77, 0x65, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x77, 0x65, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x42, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x32, 0xa5, 0x0d, 0x0a, 0x04,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x43, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x14,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d,
	0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x13, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x61,
	0x6c, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x3b, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x52, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3e,
	0x0a, 0x11, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x3c,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x4d, 0x0a, 0x15,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x49, 0x6e,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x14, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x52, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x43, 0x0a, 0x16, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x53, 0x72, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x69,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x42, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x49, 0x6e,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x4d, 0x0a, 0x16, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x19, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x46, 0x0a, 0x14, 0x41, 0x6d, 0x65, 0x6e,
	0x64, 0x43, 0x68, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x4c, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x43, 0x68, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x72, 0x74, 0x12, 0x44,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x69, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x69, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2f,
	0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x42, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x69, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_task_proto_rawDescOnce sync.Once
	file_task_proto_rawDescData = file_task_proto_rawDesc
)

func file_task_proto_rawDescGZIP() []byte {
	file_task_proto_rawDescOnce.Do(func() {
		file_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_proto_rawDescData)
	})
	return file_task_proto_rawDescData
}

var file_task_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_task_proto_goTypes = []interface{}{
	(*CreatePublishTaskInput)(nil),                  // 0: task.CreatePublishTaskInput
	(*Mistake)(nil),                                 // 1: task.Mistake
	(*RePublishTask)(nil),                           // 2: task.RePublishTask
	(*RePublishTaskBak)(nil),                        // 3: task.RePublishTaskBak
	(*PublishTaskInput)(nil),                        // 4: task.PublishTaskInput
	(*TaskDetailsInput)(nil),                        // 5: task.TaskDetailsInput
	(*ReTaskDetails)(nil),                           // 6: task.ReTaskDetails
	(*ParticipantBak)(nil),                          // 7: task.ParticipantBak
	(*PaginationData)(nil),                          // 8: task.PaginationData
	(*UserLaunchTaskListInput)(nil),                 // 9: task.UserLaunchTaskListInput
	(*TaskIDInquireInput)(nil),                      // 10: task.TaskIDInquireInput
	(*UserIDInquireInput)(nil),                      // 11: task.UserIDInquireInput
	(*TreasureTaskSrtInput)(nil),                    // 12: task.TreasureTaskSrtInput
	(*TreasureTaskStage)(nil),                       // 13: task.TreasureTaskStage
	(*TreasureTaskInput)(nil),                       // 14: task.TreasureTaskInput
	(*ReTreasureTaskSrt)(nil),                       // 15: task.ReTreasureTaskSrt
	(*ReSubtaskStyle)(nil),                          // 16: task.ReSubtaskStyle
	(*SubtaskStyle)(nil),                            // 17: task.SubtaskStyle
	(*AssociatedSubtaskSrt)(nil),                    // 18: task.AssociatedSubtaskSrt
	(*ReAssociatedSubtask)(nil),                     // 19: task.ReAssociatedSubtask
	(*AssociatedSubtask)(nil),                       // 20: task.AssociatedSubtask
	(*AmendChestCollectionInput)(nil),               // 21: task.AmendChestCollectionInput
	(*ReChestCollectionSrt)(nil),                    // 22: task.ReChestCollectionSrt
	(*TreasureTaskStageSeed)(nil),                   // 23: task.TreasureTaskStageSeed
	(*AssociatedSubtaskSeed)(nil),                   // 24: task.AssociatedSubtaskSeed
	(*CreateUserPowerTaskInput)(nil),                // 25: task.CreateUserPowerTaskInput
	(*TreasureTaskListInput)(nil),                   // 26: task.TreasureTaskListInput
	(*CreateUserPublishingAssistanceTaskInput)(nil), // 27: task.CreateUserPublishingAssistanceTaskInput
	(*UserPublishingAssistanceTask)(nil),            // 28: task.UserPublishingAssistanceTask
	(*CompleteDailyTasksInput)(nil),                 // 29: task.CompleteDailyTasksInput
	(*CreateLabelInput)(nil),                        // 30: task.CreateLabelInput
	(*ReLabelListOut)(nil),                          // 31: task.ReLabelListOut
	(*ReLabelList)(nil),                             // 32: task.ReLabelList
	(*LabelInput)(nil),                              // 33: task.labelInput
	(*ParticipatingTaskInput)(nil),                  // 34: task.ParticipatingTaskInput
	(*TaskCallInput)(nil),                           // 35: task.taskCallInput
	(*UserLaunchTaskList)(nil),                      // 36: task.UserLaunchTaskList
	(*PersonalList)(nil),                            // 37: task.PersonalList
}
var file_task_proto_depIdxs = []int32{
	8,  // 0: task.RePublishTask.paginationData:type_name -> task.PaginationData
	3,  // 1: task.RePublishTask.rePublishTaskBak:type_name -> task.RePublishTaskBak
	3,  // 2: task.ReTaskDetails.rePublishTaskSrt:type_name -> task.RePublishTaskBak
	7,  // 3: task.ReTaskDetails.participant:type_name -> task.ParticipantBak
	13, // 4: task.TreasureTaskSrtInput.treasureTaskStage:type_name -> task.TreasureTaskStage
	8,  // 5: task.ReTreasureTaskSrt.paginationData:type_name -> task.PaginationData
	12, // 6: task.ReTreasureTaskSrt.treasureTaskSrtInput:type_name -> task.TreasureTaskSrtInput
	17, // 7: task.ReSubtaskStyle.subtaskStyle:type_name -> task.SubtaskStyle
	20, // 8: task.ReAssociatedSubtask.associatedSubtask:type_name -> task.AssociatedSubtask
	23, // 9: task.ReChestCollectionSrt.treasureTaskStage:type_name -> task.TreasureTaskStageSeed
	24, // 10: task.ReChestCollectionSrt.associatedSubtask:type_name -> task.AssociatedSubtaskSeed
	32, // 11: task.ReLabelListOut.reLabelList:type_name -> task.ReLabelList
	8,  // 12: task.UserLaunchTaskList.paginationData:type_name -> task.PaginationData
	37, // 13: task.UserLaunchTaskList.PersonalList:type_name -> task.PersonalList
	0,  // 14: task.Task.CreateCuratorialTask:input_type -> task.CreatePublishTaskInput
	4,  // 15: task.Task.QueryTaskList:input_type -> task.PublishTaskInput
	5,  // 16: task.Task.QueryTaskDetails:input_type -> task.TaskDetailsInput
	9,  // 17: task.Task.QueryUserLaunchTaskList:input_type -> task.UserLaunchTaskListInput
	30, // 18: task.Task.CreateLabel:input_type -> task.CreateLabelInput
	33, // 19: task.Task.DeleteLabel:input_type -> task.labelInput
	11, // 20: task.Task.QueryLabelList:input_type -> task.UserIDInquireInput
	34, // 21: task.Task.ParticipatingTask:input_type -> task.ParticipatingTaskInput
	35, // 22: task.Task.TaskCall:input_type -> task.taskCallInput
	35, // 23: task.Task.CallSkipMessage:input_type -> task.taskCallInput
	12, // 24: task.Task.AmendTreasureTask:input_type -> task.TreasureTaskSrtInput
	14, // 25: task.Task.ChangeTreasureTask:input_type -> task.TreasureTaskInput
	26, // 26: task.Task.QueryTreasureTaskList:input_type -> task.TreasureTaskListInput
	10, // 27: task.Task.QuerySubtaskStyle:input_type -> task.TaskIDInquireInput
	18, // 28: task.Task.AmendAssociatedSubtask:input_type -> task.AssociatedSubtaskSrt
	10, // 29: task.Task.DeleteAssociatedSubtask:input_type -> task.TaskIDInquireInput
	10, // 30: task.Task.QueryAssociatedSubtask:input_type -> task.TaskIDInquireInput
	21, // 31: task.Task.AmendChestCollection:input_type -> task.AmendChestCollectionInput
	11, // 32: task.Task.QueryChestCollection:input_type -> task.UserIDInquireInput
	25, // 33: task.Task.CreateUserPowerTask:input_type -> task.CreateUserPowerTaskInput
	11, // 34: task.Task.CreateSubtaskStyle:input_type -> task.UserIDInquireInput
	27, // 35: task.Task.CreateAssistanceTask:input_type -> task.CreateUserPublishingAssistanceTaskInput
	11, // 36: task.Task.QueryAssistanceTask:input_type -> task.UserIDInquireInput
	10, // 37: task.Task.ping:input_type -> task.TaskIDInquireInput
	29, // 38: task.Task.CompleteDailyTasks:input_type -> task.CompleteDailyTasksInput
	1,  // 39: task.Task.CreateCuratorialTask:output_type -> task.Mistake
	2,  // 40: task.Task.QueryTaskList:output_type -> task.RePublishTask
	6,  // 41: task.Task.QueryTaskDetails:output_type -> task.ReTaskDetails
	36, // 42: task.Task.QueryUserLaunchTaskList:output_type -> task.UserLaunchTaskList
	1,  // 43: task.Task.CreateLabel:output_type -> task.Mistake
	1,  // 44: task.Task.DeleteLabel:output_type -> task.Mistake
	31, // 45: task.Task.QueryLabelList:output_type -> task.ReLabelListOut
	1,  // 46: task.Task.ParticipatingTask:output_type -> task.Mistake
	10, // 47: task.Task.TaskCall:output_type -> task.TaskIDInquireInput
	6,  // 48: task.Task.CallSkipMessage:output_type -> task.ReTaskDetails
	1,  // 49: task.Task.AmendTreasureTask:output_type -> task.Mistake
	1,  // 50: task.Task.ChangeTreasureTask:output_type -> task.Mistake
	15, // 51: task.Task.QueryTreasureTaskList:output_type -> task.ReTreasureTaskSrt
	16, // 52: task.Task.QuerySubtaskStyle:output_type -> task.ReSubtaskStyle
	1,  // 53: task.Task.AmendAssociatedSubtask:output_type -> task.Mistake
	1,  // 54: task.Task.DeleteAssociatedSubtask:output_type -> task.Mistake
	19, // 55: task.Task.QueryAssociatedSubtask:output_type -> task.ReAssociatedSubtask
	1,  // 56: task.Task.AmendChestCollection:output_type -> task.Mistake
	22, // 57: task.Task.QueryChestCollection:output_type -> task.ReChestCollectionSrt
	1,  // 58: task.Task.CreateUserPowerTask:output_type -> task.Mistake
	1,  // 59: task.Task.CreateSubtaskStyle:output_type -> task.Mistake
	1,  // 60: task.Task.CreateAssistanceTask:output_type -> task.Mistake
	28, // 61: task.Task.QueryAssistanceTask:output_type -> task.UserPublishingAssistanceTask
	1,  // 62: task.Task.ping:output_type -> task.Mistake
	1,  // 63: task.Task.CompleteDailyTasks:output_type -> task.Mistake
	39, // [39:64] is the sub-list for method output_type
	14, // [14:39] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_task_proto_init() }
func file_task_proto_init() {
	if File_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublishTaskInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mistake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RePublishTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RePublishTaskBak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishTaskInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDetailsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReTaskDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantBak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLaunchTaskListInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIDInquireInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIDInquireInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureTaskSrtInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureTaskStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureTaskInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReTreasureTaskSrt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReSubtaskStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtaskStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociatedSubtaskSrt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReAssociatedSubtask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociatedSubtask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmendChestCollectionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReChestCollectionSrt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureTaskStageSeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociatedSubtaskSeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserPowerTaskInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureTaskListInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserPublishingAssistanceTaskInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPublishingAssistanceTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteDailyTasksInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLabelInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReLabelListOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReLabelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipatingTaskInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCallInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLaunchTaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_proto_goTypes,
		DependencyIndexes: file_task_proto_depIdxs,
		MessageInfos:      file_task_proto_msgTypes,
	}.Build()
	File_task_proto = out.File
	file_task_proto_rawDesc = nil
	file_task_proto_goTypes = nil
	file_task_proto_depIdxs = nil
}
