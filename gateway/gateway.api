// UserLogin is the message for user login.
type UserLogin {
	Code         string `json:"code"`
	CodeVerifier string `json:"codeVerifier"`
	InviteId     string `json:"inviteId"`
}

// UserLoginReply is the reply for user login.
type UserLoginReply {
	Token string `json:"token"`
}

// AdminLogin is the message for admin login.
type AdminLogin {
	AdminName     string `json:"adminName"`
	AdminPassword string `json:"adminPassword"`
}

// AdminLoginReply is the reply for admin login.
type AdminLoginReply {
	Token string `json:"token"`
}

type UserInfoReply {
	UserId      string `json:"userId"`
	UserName    string `json:"userName"`
	TwitterName string `json:"twitterName"`
	UserAvatar  string `json:"userAvatar"`
	IsNew       int64  `json:"isNew"`
}

type HelpCategoryList {
	LanguageCode string `json:"languageCode"`
}

//getHelpCategoryList
type GetHelpCategoryList {
	LanguageCode string `json:"languageCode"`
}

type HelpCategoryListReply {
	CategoryList []CategoryList `json:"categoryList"`
}

type CategoryList {
	CategoryId   string `json:"categoryId"`
	CategoryName string `json:"categoryName"`
}
// CurrentOnlinePersonReply
type CurrentOnlinePersonReply {
	CurrentOnlinePerson int64 `json:"currentOnlinePerson"`
}

//RegisteredPopulationReply
type RegisteredPopulationReply {
	RegisteredPopulation int64 `json:"registeredPopulation"`
}

//GetUserListByCondition
type GetUserListByCondition {
	BlackStatus *int64  `json:"blackStatus"` //冻结状态
	PageNum     int64   `json:"pageNum"`     //页码
	PageSize    int64   `json:"pageSize"`    //每页条数
	OrderType   *string `json:"order"`       //排序
	TwitterId   *string `json:"twitterId"`   //推特id
}

//GetUserListByConditionReply
type GetUserListByConditionReply {
	TwitterId     string `json:"twitterId"`     //推特id
	UserID        int64  `json:"userId"`        //用户id
	RegisterAt    int64  `json:"registerAt"`    //注册时间
	RecomendBy    string `json:"recomendBy"`    //推荐人
	IsBlacklisted int64  `json:"isBlacklisted"` //是否冻结
}

//BatchUpdateUserBlackStatus
type BatchUpdateUserBlackStatus {
	UserIdList  []int64 `json:"userIdList"`  //用户id列表
	BlackStatus int64   `json:"blackStatus"` //冻结状态
}

//BatchUpdateUserBlackStatusReply
type BatchUpdateUserBlackStatusReply {
	UserIdList  []int64 `json:"userIdList"`  //用户id列表
	BlackStatus int64   `json:"blackStatus"` //冻结状态
}

//CreateAdminUser
type CreateAdminUser {
	AdminName     string `json:"adminName"`     //管理员名称
	AdminPassword string `json:"adminPassword"` //管理员密码
}

//CreateAdminUserReply
type CreateAdminUserReply {
	Token string `json:"token"`
}

//GetHelpDocumentTitleList
type GetHelpDocumentTitleList {
	HelpCategoryId string `json:"helpCategoryId"` //帮助文档分类id
	LanguageCode   string `json:"languageCode"`   //语言编码
}

type GetHelpDocumentTitleListReply {
	HelpDocumentTitleList []HelpDocumentTitleList `json:"helpDocumentTitleList"`
}

type HelpDocumentTitleList {
	HelpDocumentId int64  `json:"helpDocumentId"` //帮助文档id
	DocumentTitle  string `json:"DocumentTitle"`  //帮助文档标题
	LanguageCode   string `json:"languageCode"`   //语言编码
}

type HelpDocumentTitleListReply {
	HelpDocumentTitleList []HelpDocumentTitleList `json:"helpDocumentTitleList"`
}

//GetContentByHelpDocumentId
type GetContentByHelpDocumentId {
	HelpDocumentId string `json:"helpDocumentId"` //帮助文档id
	LanguageCode   string `json:"languageCode"`   //语言编码
}

type ContentByHelpDocumentIdReply {
	HelpDocumentId  int64  `json:"helpDocumentId"`    //帮助文档id
	DocumentContent string `json:"documentContent"`   //帮助文档内容
	LanguageCode    string `json:"languageCode"`      //语言编码
	DocumentTitle   string `json:"helpDocumentTitle"` //帮助文档标题
}

type GetMessageList {
	LastNoticeId int64 `json:"lastNoticeId"` //通知时间
	NoticeType   int64 `json:"noticeType"`   //通知类型 1:系统通知 2:用户通知 3:全部
}
type NoticeList {
	NoticeId      int64  `json:"noticeId"`      //通知id
	NoticeTitle   string `json:"noticeTitle"`   //通知标题
	NoticeContent string `json:"noticeContent"` //通知内容
	NoticeTime    int64  `json:"noticeTime"`    //通知时间
	NoticeType    int64  `json:"noticeType"`    //通知类型 1:系统通知 2:用户通知
	NoticeStatus  int64  `json:"noticeStatus"`  //通知状态 1:未读 2:已读
}

type Noticelds {
	SystemNoticeIds          int64 `json:"systemNoticeIds"`
	TargetSystemNoticeStatus int64 `json:"targetSystemNoticeStatus"`
}

//EditNoticeStatus 批量
type EditNoticeStatus {
	EditItems []Noticelds `json:"noticelds"` // 批量编辑通知的信息
}

//EditNoticeStatusReply
type EditNoticeStatusReply {
	IsSuccess bool `json:"isSuccess"` //是否成功
}

@server(
	prefix :/v1
	group :ping
)

service gateway-api {
	@doc "用户登录"
	@handler ping
	get /ping
}

// 下面是用户接口，不需要鉴权
@server(
	prefix :/v1
	group :user
)

service gateway-api {
	@doc "用户登录"
	@handler user
	post /user/userLogin (UserLogin) returns (UserLoginReply)
	
	@doc "获取帮助文档分类列表"
	@handler getHelpCategoryList
	post /user/getHelpCategoryList (GetHelpCategoryList) returns (HelpCategoryListReply)
	
	@doc "获取帮助文档分类内容标题列表"
	@handler getHelpDocumentTitleList
	post /user/getHelpDocumentTitleList (GetHelpDocumentTitleList) returns (GetHelpDocumentTitleListReply)
	
	@doc "根据帮助文档id获取内容详情"
	@handler getContentByHelpDocumentId
	post /user/getContentByHelpDocumentId (GetContentByHelpDocumentId) returns (ContentByHelpDocumentIdReply)
	
}

type GetMessageListReply {
	NoticeList []NoticeList `json:"noticeList"`
}

//GetMessageByNoticeId
type GetMessageByNoticeId {
	NoticeId int64 `json:"noticeId"` //通知id
}

//AddCategory
type AddCategory {
	CategoryName string `json:"categoryName"` //分类名称
	LanguageCode string `json:"languageCode"` //语言编码
}

//AddCategoryReply
type AddCategoryReply {
	IsSuccess bool `json:"isSuccess"` //是否成功
}
//GetNoticeBy
type GetNoticeBy {
	SystemNoticeId      int64  `json:"systemNoticeId"`      //系统通知id
	SystemNoticeTitle   string `json:"systemNoticeTitle"`   //系统通知标题
	SystemNoticeContent string `json:"systemNoticeContent"` //系统通知内容
	SystemNoticeStatus  int64  `json:"systemNoticeStatus"`  //系统通知状态
	SystemNoticeTime    int64  `json:"systemNoticeTime"`    //系统通知时间
	IsAutoPublish       bool   `json:"isAutoPublish"`       //是否自动发布
}
//GetNoticeByReply
type GetNoticeByReply {
	IsSuccess bool `json:"isSuccess"` //是否成功
}

//EditNotice
type EditNotice {
	SystemNoticeId      int64  `json:"systemNoticeId"`      //系统通知id
	SystemNoticeTitle   string `json:"systemNoticeTitle"`   //系统通知标题
	SystemNoticeContent string `json:"systemNoticeContent"` //系统通知内容
	SystemNoticeStatus  int64  `json:"systemNoticeStatus"`  //系统通知状态
	SystemNoticeTime    string `json:"systemNoticeTime"`    //系统通知时间
	IsAutoPublish       bool   `json:"isAutoPublish"`       //是否自动发布
}

type EditNoticeReply {
	IsSuccess bool `json:"isSuccess"` //是否成功
}

// 下面是用户接口，需要鉴权
@server(
	prefix :/v1
	group :user
	middleware : BlackMiddleware
	jwt : Auth
)

service gateway-api {
	@doc "用户退出登录"
	@handler userLogout
	post /user/userLogout  returns (UserLoginReply)
	
	@doc "获取用户信息"
	@handler getUserInfo
	post /user/getUserInfo returns (UserInfoReply)
	
	@doc "获取消息通知列表"
	@handler getMessageList
	post /user/getMessageList (GetMessageList) returns (GetMessageListReply)
	
	@doc "根据通知id获取消息通知详情"
	@handler getMessageByNoticeId
	post /user/getMessageByNoticeId (GetMessageByNoticeId) returns (NoticeList)
	
}

// 下面是管理员接口，不需要鉴权
@server(
	prefix :/v1
	group :admin
)
service gateway-api {
	@doc "管理员登录"
	@handler adminLogin
	post /admin/adminLogin (AdminLogin) returns (AdminLoginReply)
	
	@doc "管理员注册"
	@handler createAdminUser
	post /admin/createAdminUser (CreateAdminUser) returns (CreateAdminUserReply)
	
}

// 下面是管理员接口，需要鉴权
@server(
	prefix :/v1
	group : admin
	jwt : AdminAuth
)

service gateway-api {
	@doc "管理员退出登录"
	@handler adminLogout
	post /admin/adminLogout returns (AdminLoginReply)
	
	@doc "获取当前在线人数"
	@handler getCurrentOnlinePerson
	post /admin/getCurrentOnlinePerson returns (CurrentOnlinePersonReply)
	
	@doc "获取当前注册人数"
	@handler getRegisteredPopulation
	post /admin/getRegisteredPopulation returns (RegisteredPopulationReply)
	
	@doc "获取用户信息"
	@handler adminUserInfo
	post /admin/getUserInfo returns (UserInfoReply)
	
	@doc "按条件获取用户列表的接口"
	@handler getUserListByCondition
	post /admin/getUserListByCondition (GetUserListByCondition) returns (GetUserListByConditionReply)
	
	@doc "批量更新用户黑名单状态"
	@handler batchUpdateUserBlackStatus
	post /admin/batchUpdateUserBlackStatus (BatchUpdateUserBlackStatus) returns (BatchUpdateUserBlackStatusReply)
	
	//公告管理
	//	@doc "按条件获取公告列表"
	//	@handler getNoticeBy
	//	post /admin/getNoticeBy (GetNoticeBy) returns (GetNoticeByReply)
	
	@doc "批量修改公告发布状态"
	@handler editNoticeStatus
	post /admin/editNoticeStatus (EditNoticeStatus) returns (EditNoticeStatusReply)
	
	@doc"新建编辑公告"
	@handler editNotice
	post /admin/editNotice (EditNotice) returns (EditNoticeReply)
	
	//	@doc"批量删除公告"
	//	@handler deleteNotice
	//	post /admin/deleteNotice (DeleteNotice) returns (DeleteNoticeReply)
	
	//    @doc "查看公告详情"
	//	@handler getNotice
	//	post /admin/getNotice (GetNotice) returns (GetNoticeReply)
	
	// 内容管理
	@doc "新建编辑分类"
	@handler addCategory
	post /admin/addCategory (AddCategory) returns (AddCategoryReply)
	
	//	@doc "批量删除分类"
	//	@handler batchDeleteCategory
	//	post /admin/batchDeleteCategory (BatchDeleteCategory) returns (BatchDeleteCategoryReply)
	
	//	@doc "按条件筛选分类的问答列表"
	//	@handler getCategoryListByCondition
	//	post /admin/getCategoryListByCondition (GetCategoryListByCondition) returns (GetCategoryListByConditionReply)
	
	//	@doc "批量更改分类的发布状态"
	//	@handler categorylistStatus
	//	post /admin/categorylistStatus (CategorylistStatus) returns (CategorylistStatusReply)
	
	//	@doc "新建编辑分类问答"
	//	@handler editCategory
	//	post /admin/editCategory (EditCategory) returns (EditCategoryReply)
	
	//	@doc "按条件筛选分类问答列表"
	//	@handler getDocumentContentListByCondition
	//	post /admin/getDocumentContentListByCondition (GetDocumentContentListByCondition) returns (GetDocumentContentListByConditionReply)
	
	//	@doc "批量更改分类问答的发布状态"
	//	@handler documentContentlistStatus
	//	post /admin/documentContentlistStatus (DocumentContentlistStatus) returns (DocumentContentlistStatusReply)
	
	//	@doc "批量删除分类问答"
	//	@handler batchDeleteCategory
	//	post /admin/batchDeleteCategory (BatchDeleteCategory) returns (BatchDeleteCategoryReply)
	
}

/*任务信息开始*/
//  Curatorial task information receiving table (策展任务信息接收表)
type CreatePublishTaskInput {
	Creator      string        `json:"creator"`
	TweetAddress string        `json:"tweetAddress"`
	Label        []string      `json:"label"`
	AwardBudget  float64       `json:"awardBudget"`
	MaxUser      int64         `json:"maxUser"`
	AwardAmount  float64       `json:"awardAmount"`
	TaskDemand   []*TaskDemand `json:"taskDemand"`
}

// mission requirement (任务要求)
type TaskDemand {
	TaskID     uint   `json:"taskId"`
	TaskName   int    `json:"taskName"`
	TaskDemand string `json:"taskDemand"`
	Article    string `json:"article"`
}

// Information return (信息返回)
type Mistake {
	Msg string `json:"msg"`
}

// Curatorial task information return table (策展任务信息返回表)
type RePublishTask {
	PaginationData   PaginationData      `json:"paging"`
	RePublishTaskBak []*RePublishTaskBak `json:"data"`
}

// Curatorial task information return table (策展任务信息返回表)
type RePublishTaskBak {
	TaskID        uint64        `json:"taskId"`
	CreatedAt     string        `json:"createdAt"`
	Creator       string        `json:"creator"`
	CreatorName   string        `json:"creatorName"`
	CreatorNick   string        `json:"creatorNick"`
	CreatorAvatar string        `json:"creatorAvatar"`
	Status        int32         `json:"status"`
	TweetDetails  string        `json:"tweetDetails"`
	TweetPicture  string        `json:"tweetPicture"`
	Label         string        `json:"label"`
	AwardBudget   float64       `json:"awardBudget"`
	MaxUser       int32         `json:"maxUser"`
	AwardAmount   float64       `json:"awardAmount"`
	EndTime       string        `json:"endTime"`
	Accomplish    int32         `json:"accomplish"`
	TaskDemand    []*TaskDemand `json:"taskDemand"`
}

// 分页数据格式
type PaginationData {
	Total   int64 `json:"total"`
	Page    int64 `json:"page"`
	PerPage int64 `json:"per_page"`
}

// Query curatorial task input (查询策展任务输入)
type PublishTaskInput {
	Status   int64 `json:"status"`
	CurrPage int64 `json:"currPage"`
	MaxNum   int64 `json:"maxNum"`
}

// 任务详情
type ReTaskDetails {
	RePublishTaskBak RePublishTaskBak  `json:"publishTask"`
	ParticipantBak   []*ParticipantBak `json:"participant"`
	TaskDemandBak    []*TaskDemandBak  `json:"taskStatus"`
}

// Query task details (查询任务详情入参)
type TaskDetailsInput {
	TaskId uint64 `json:"taskId"`
	UserId string `json:"userId"`
}

type ParticipantBak {
	UserId      string  `json:"userId"`
	UserName    string  `json:"userName"`
	NickName    string  `json:"nickName"`
	Avatar      string  `json:"avatar"`
	AwardAmount float64 `json:"awardAmount"`
	TaskID      uint64  `json:"taskId"`
	Status      int32   `json:"status"`
}
type TaskDemandBak {
	TaskID     uint64 `json:"taskId"`
	TaskName   int64  `json:"taskName"`
	TaskDemand string `json:"taskDemand"`
	Article    string `json:"article"`
	Status     int32  `json:"status"`
}

// Query the list of individual initiated tasks + Participating tasks (查询个人发起任务列表+参与任务入参)
type UserLaunchTaskListInput {
	UserId   string `json:"userId"`
	CurrPage int64  `json:"currPage"`
	MaxNum   int64  `json:"maxNum"`
	Status   int64  `json:"status"`
}
// Create a label entry (创建标签入参)
type CreateLabelInput {
	UserId string `json:"userId"`
	Label  string `json:"label"`
}

// The parameter is the id type
type TaskIDInquireInput {
	Id uint64 `json:"id"`
}

// The parameter is the userId type
type UserIDInquireInput {
	UserId string `json:"userId"`
}

// ReLabelListOut 标签返回结果体
type ReLabelListOut {
	ReLabelList []*ReLabelList `json:"reLabelList"`
}

// Gets the tag list out of the parameters (获取标签列表出参)
type ReLabelList {
	Id      uint64 `json:"id"`
	Creator string `json:"creator"`
	Content string `json:"content"`
}

// Determine whether the curatorial task has been completed (判断是否完成策展任务进参)
type PerformTaskInput {
	TaskId uint64 `json:"taskId"`
	UserId string `json:"userId"`
}

// Complete the curatorial task (like + follow)(unfinished) (完成站内策展任务(喜欢+关注)(未完成))
type VoluntarilyTaskScheduleInput {
	UserId string `json:"userId"`
	TaskId int64  `json:"taskId"`
	Genre  int64  `json:"genre"`
}

// Create Treasure Chest Style + Edit Treasure Chest style input (创建宝箱样式+编辑宝箱样式进参)
type TreasureTaskSrtInput {
	Id                uint64               `json:"id"`
	Name              string               `json:"name"`
	DemandIntegral    int64                `json:"demandIntegral"`
	TaskReward        int64                `json:"taskReward"`
	ExperienceReward  int64                `json:"experienceReward"`
	RewardQuantity    int64                `json:"rewardQuantity"`
	TreasureTaskStage []*TreasureTaskStage `json:"treasureTaskStage"`
}

// Treasure box stage (宝箱阶段)
type TreasureTaskStage {
	ID               int64 `json:"iD"`
	Treasure         int64 `json:"treasure"`
	TreasureSequence int64 `json:"treasureSequence"`
	StageExperience  int64 `json:"stageExperience"`
	StageReward      int64 `json:"stageReward"`
}

// Shelves + Remove treasure chest style (上架+删除宝箱样式)
type TreasureTaskInput {
	Id     uint64 `json:"id"`
	Status int32  `json:"status"`
}

//  Query + Search for a list of chest styles entered (查询+搜索宝箱样式列表入参)
type TreasureTaskListInput {
	Name     string `json:"name"`
	Reward   int64  `json:"reward"`
	CurrPage int64  `json:"currPage"`
	MaxNum   int64  `json:"maxNum"`
}

// Treasure chest style returns the structure (宝箱样式返回结构体)
type ReTreasureTaskSrt {
	PaginationData       PaginationData          `json:"paginationData"`
	TreasureTaskSrtInput []*TreasureTaskSrtInput `json:"treasureTaskSrtInput"`
}

// The substyle list returns data (子样式列表返回数据)
type ReSubtaskStyle {
	SubtaskStyle []*SubtaskStyle `json:"subtaskStyle"`
}

// The substyle returns the struct (子样式返回结构体)
type SubtaskStyle {
	TaskId         int64  `json:"taskId"`
	TaskName       string `json:"taskName"`
	TaskNameEng    string `json:"taskNameEng"`
	TaskDetails    string `json:"taskDetails"`
	TaskDetailsEng string `json:"taskDetailsEng"`
	TaskStatus     int64  `json:"taskStatus"`
}

// Associated subtask (关联子任务)
type AssociatedSubtaskSrt {
	AssociatedId   uint64 `json:"associatedId"`
	TaskId         uint64 `json:"taskId"`
	TreasureId     uint64 `json:"treasureId"`
	TaskName       string `json:"taskName"`
	TaskNameEng    string `json:"taskNameEng"`
	TaskDetails    string `json:"taskDetails"`
	TaskDetailsEng string `json:"taskDetailsEng"`
	TaskStatus     int64  `json:"taskStatus"`
	Reward         int64  `json:"reward"`
	Experience     int64  `json:"experience"`
	Number         int64  `json:"number"`
	Article        string `json:"article"`
	Link           string `json:"link"`
	Label          string `json:"label"`
}

// Associated subtask return list (关联子任务返回列表)
type ReAssociatedSubtask {
	AssociatedSubtask []*AssociatedSubtask `json:"associatedSubtask"`
}
// Associated Subtask (关联子任务)
type AssociatedSubtask {
	TaskId         uint64 `json:"taskId"`
	TaskName       string `json:"taskName"`
	TaskNameEng    string `json:"taskNameEng"`
	TaskDetails    string `json:"taskDetails"`
	TaskDetailsEng string `json:"taskDetailsEng"`
	TaskStatus     int64  `json:"taskStatus"`
	Reward         int64  `json:"reward"`
	Experience     int64  `json:"experience"`
	Number         int64  `json:"number"`
	Article        string `json:"article"`
	Link           string `json:"link"`
	Label          string `json:"label"`
	TreasureId     uint64 `json:"treasureId"`
}

// Create Treasure Chest claim level + update Treasure chest claim progress entry (创建宝箱领取度+更新宝箱领取进度入参)
type AmendChestCollectionInput {
	UserId string `json:"userId"`
	Amount int64  `json:"amount"`
}

// Treasure chest progress returns data (宝箱进度返回数据)
type ReChestCollectionSrt {
	SerId                 string                   `json:"serId"`
	DemandIntegral        int64                    `json:"demandIntegral"`
	ChestAmount           int64                    `json:"chestAmount"`
	RewardQuantity        int64                    `json:"rewardQuantity"`
	TreasureTaskStageSeed []*TreasureTaskStageSeed `json:"treasureTaskStageSeed"`
	AssociatedSubtaskSeed []*AssociatedSubtaskSeed `json:"associatedSubtaskSeed"`
}

//  Treasure chest stage substyle (宝箱阶段子样式)
type TreasureTaskStageSeed {
	Treasure         int64   `json:"treasure"`
	TreasureSequence int64   `json:"treasureSequence"`
	StageExperience  int64   `json:"stageExperience"`
	TreasureRatio    float64 `json:"treasureRatio"`
	StageReward      int64   `json:"stageReward"`
}

// Associate subtask substyles (关联子任务子样式)
type AssociatedSubtaskSeed {
	TreasureId     int64  `json:"treasureId"`
	TaskId         int64  `json:"taskId"`
	TaskName       string `json:"taskName"`
	TaskNameEng    string `json:"taskNameEng"`
	TaskDetails    string `json:"taskDetails"`
	TaskDetailsEng string `json:"taskDetailsEng"`
	TaskStatus     int64  `json:"taskStatus"`
	Reward         int64  `json:"reward"`
	Experience     int64  `json:"experience"`
	Number         int64  `json:"number"`
	Article        string `json:"article"`
	Link           string `json:"link"`
	Label          string `json:"label"`
	Complete       int64  `json:"complete"`
}

// CreateUserPowerTask 创建用户助力信息
type CreateUserPowerTaskInput {
	PublishesUserId string `json:"publishesUserId"`
	HelperUserId    string `json:"helperUserId"`
}

// 策展任务相关接口，需要鉴权
@server(
	prefix :/v1
	group :curatorial
	middleware : BlackMiddleware
	jwt : Auth
)

service gateway-api {
	@doc "创建策展任务信息"
	@handler CreateCuratorialTask
	post /curatorial/create (CreatePublishTaskInput) returns (Mistake)
	
	@doc "查询策展任务列表"
	@handler QueryTaskList
	post /curatorial/list (PublishTaskInput) returns (RePublishTask)
	
	@doc "查询任务详情"
	@handler QueryTaskDetails
	post /curatorial/details (TaskDetailsInput) returns (ReTaskDetails)
	
	@doc "查询个人发起任务列表+参与任务"
	@handler QueryUserLaunchTaskList
	post /curatorial/user/list (UserLaunchTaskListInput) returns (RePublishTask)
	
	@doc "创建标签"
	@handler createLabel
	post /curatorial/label/create (CreateLabelInput) returns (Mistake)
	
	@doc "删除标签"
	@handler DeleteLabel
	post /curatorial/label/delete (TaskIDInquireInput) returns (Mistake)
	
	@doc "获取标签列表"
	@handler getLabelList
	post /curatorial/label/list (UserIDInquireInput) returns (ReLabelListOut)
	
	@doc "判断是否完成策展任务"
	@handler PerformTask
	post /curatorial/verify (PerformTaskInput) returns (Mistake)
	
	@doc "完成站内策展任务"
	@handler VoluntarilyTaskSchedule
	post /curatorial/voluntarily (VoluntarilyTaskScheduleInput) returns (Mistake)
}

// 策展任务相关接口，需要鉴权
@server(
	prefix :/v1
	group :everyday
	middleware : BlackMiddleware
	jwt : Auth
)

service gateway-api {
	@doc "修改宝箱样式"
	@handler AmendTreasureTask
	post /everyday/treasure/amend (TreasureTaskSrtInput)  returns (Mistake)
	
	@doc "上架+删除宝箱样式"
	@handler ChangeTreasureTask
	post /everyday/treasure/change (TreasureTaskInput)  returns (Mistake)
	
	@doc "查询+搜索宝箱样式列表"
	@handler QueryTreasureTaskList
	post /everyday/treasure/list (TreasureTaskListInput)  returns (ReTreasureTaskSrt)
	
	@doc "查询子任务样式列表"
	@handler QuerySubtaskStyle
	post /everyday/subtask/list (TaskIDInquireInput)  returns (ReSubtaskStyle)
	
	@doc "创建关联子任务+编辑关联子任务"
	@handler AmendAssociatedSubtask
	post /everyday/subtask/amend(AssociatedSubtaskSrt)  returns (Mistake)
	
	@doc "删除管理子任务"
	@handler DeleteAssociatedSubtask
	post /everyday/subtask/delete(TaskIDInquireInput)  returns (Mistake)
	
	@doc "查询关联子任务"
	@handler QueryAssociatedSubtask
	post /everyday/subtask/treasureId (TaskIDInquireInput)  returns (ReAssociatedSubtask)
	
	@doc "创建宝箱领取度+更新宝箱领取进度"
	@handler AmendChestCollection
	post /everyday/chest/amemd (AmendChestCollectionInput)  returns (Mistake)
	
	@doc "获取用户宝箱进度"
	@handler QueryChestCollection
	post /everyday/chest/schedule (UserIDInquireInput)  returns (ReChestCollectionSrt)
	
	@doc "创建用户助力信息"
	@handler CreateUserPowerTask
	post /everyday/subtask/power (CreateUserPowerTaskInput)  returns (Mistake)
	
	@doc "创建子任务样式"
	@handler CreateSubtaskStyle
	post /everyday/subtask/create (UserIDInquireInput)  returns (Mistake)
}

/*商城部分开始*/
// 管理系统创建矿机
type CreateCryptominerInput {
	AdminUserID         int64  `json:"adminUserId"`
	CryptominerName     string `json:"cryptominerName"`
	CryptominerPicture  string `json:"cryptominerPicture"`
	CryptominerDescribe string `json:"cryptominerDescribe"`
	CryptominerPrice    int64  `json:"cryptominerPrice"`
	CryptominerDuration int64  `json:"cryptominerDuration"`
	CryptominerPower    int64  `json:"cryptominerPower"`
	PaymentWay          string `json:"paymentWay"`
}

// 响应
type IsSuccessReply {
	IsSuccess bool `json:"isSuccess"` // 创建成功
}

// 管理系统创建道具
type CreatePropInput {
	AdminUserID  int64  `json:"adminUserId"`  // 创建者id
	PropName     string `json:"propName"`     // 矿机名称
	PropPicture  string `json:"propPicture"`  // 矿机图片
	PropDescribe string `json:"propDescribe"` // 矿机描述
	PropPrice    int64  `json:"propPrice"`    // 矿机价格
	PaymentWay   string `json:"paymentWay"`   // 支付方式 0：U 1：ADF
}

// 管理系统获取活动列表
type AdminGoodListInput {
	AdminUserID int64 `json:"adminUserId"` // 管理员id
}

// 管理系统活动(用来展示)
type Activity {
	ActivityID       int64  `json:"activityId"`       // 关联矿机种类id
	CryptominerName  string `json:"cryptominerName"`  // 矿机名称
	UserAmount       int64  `json:"userAmount"`       // 砍价人数
	MinPrice         string `json:"minPrice"`         // 最小砍价金额
	FirstBargainPer  string `json:"firstBargainPer"`  // 首次砍价百分比
	FriendBargainPer string `json:"friendBargainPer"` // 好友砍价比率
	IsActivation     int64  `json:"isActivation"`     // 矿机状态  0：未开启  1：开启
}

// 管理系统获取活动列表
type AdminGoodListReply {
	AdminGood []*AdminGood `json:"adminGood"`
}

type AdminGood {
	GoodTypeID   int64  `json:"goodTypeID"`   // 商品typeid
	GoodName     string `json:"goodName"`     // 商品名称
	GoodDuration int64  `json:"goodDuration"` // 商品工作时长
	PaymentWay   string `json:"paymentWay"`   // 支付方式 0：U ,1:ADF
	PropPrice    int64  `json:"propPrice"`    // 商品价格
	GoodStatus   string `json:"goodStatus"`   // 商品状态  0：待上架  1：已上架 2：未上架
}

// 上架商品道具
type StartGoodInput {
	GoodTypeID int64 `json:"goodTypeId"` // 商品种类id
}

// 管理系统创建矿机活动
type CreateActivityInput {
	AdminUserID       int64   `json:"adminUserID"`       // 管理员id
	CryptominerTypeID int64   `json:"cryptominerTypeID"` // 关联矿机种类id
	UserAmount        int64   `json:"userAmount"`        // 砍价人数
	MinPrice          float64 `json:"minPrice"`          // 最小砍价金额
	FirstBargainPer   float64 `json:"firstBargainPer"`   // 首次砍价百分比
	FriendBargainPer  float64 `json:"friendBargainPer"`  // 好友砍价比率
}

// 管理系统获取活动列表
type AdminActivityListInput {
	AdminUserID int64 `json:"adminUserID"` // 管理员id
}

type AdminActivityListReply {
	Activity []*Activity `json:"activity"`
}

// 开启系统矿机活动
type StartActivityInput {
	ActivityID int64 `json:"activityId"` // 关联矿机种类id
}

// 获取商城列表
type GetGoodsListInput {
	UserID int64 `json:"userId"`
}

// 获取商城列表
type GetGoodsListReply {
	Cryptominer []*Cryptominer `json:"cryptominer"`
	Prop        []*Prop        `json:"prop"`
}

// Cryptominer 矿机
type Cryptominer {
	CryptominerID        int64  `json:"cryptominerId"` // ID
	UserID               int64  `json:"userId"`
	CryptominerTypeID    int64  `json:"cryptominerTypeId"`    // 矿机种类id
	CryptominerName      string `json:"cryptominerName"`      // 矿机名称
	CryptominerPicture   string `json:"cryptominerPicture"`   // 矿机图片
	CryptominerDescribe  string `json:"cryptominerDescribe"`  // 矿机描述
	CryptominerPrice     int64  `json:"cryptominerPrice"`     // 矿机价格
	OptionalStatus       string `json:"optionalStatus"`       // 矿机状态 0：未购买 1：工作中 2：已失效 3：砍价中
	PurchaseTime         string `json:"purchaseTime"`         // 购买时间
	IsBargain            bool   `json:"isBargain"`            // 是否可砍
	PurchaseWay          string `json:"purchaseWay"`          // 购买方式 0：全额购买 1：限时砍价
	PaymentWay           string `json:"paymentWay"`           // 支付方式 0：U 1：ADF
	CryptominerStartTime string `json:"cryptominerStartTime"` // 矿机开始运作时间
	CryptominerEndTime   string `json:"cryptominerEndTime"`   // 矿机失效时间
	CryptominerDuration  int64  `json:"cryptominerDuration"`  // 矿机运作时间
	CryptominerPower     int64  `json:"cryptominerPower"`     // 矿机算力
}

// Prop 道具
type Prop {
	PropID       int64  `json:"propId"` // ID
	UserID       int64  `json:"userId"`
	PropTypeID   int64  `json:"propTypeId"`   // 道具种类id
	PropName     string `json:"propName"`     // 道具名称
	PropPicture  string `json:"propPicture"`  // 道具图片
	PropDescribe string `json:"propDescribe"` // 道具描述
	PropPrice    int64  `json:"propPrice"`    // 道具价格
	PurchaseTime string `json:"purchaseTime"` // 购买时间
	PaymentWay   string `json:"paymentWay"`   // 支付方式 0：U 1：ADF
}

// 判断是否可以砍价
type JudgeBargainInput {
	UserID            int64 `json:"userId"`            // 用户id
	CryptominerTypeID int64 `json:"cryptominerTypeId"` // 矿机种类ids
}

// 判断是否可以砍价
type JudgeBargainReply {
	IsBargain bool `json:"isBargain"` // 砍价id
}

// 购买道具
type PropPurchaseInput {
	UserID int64 `json:"userId"` // 用户id
	PropID int64 `json:"propId"` // 商品id
}

// 矿机全额购买
type CryptominerPurchaseInput {
	UserID        int64 `json:"userId"`        // 用户id
	CryptominerID int64 `json:"cryptominerId"` // 商品id
}

// 矿机限时购买
type CryptominerBargainInput {
	UserID        int64 `json:"userId"`        // 用户id
	CryptominerID int64 `json:"cryptominerId"` // 商品id
}

// 矿机限时购买
type CryptominerBargainReply {
	BargainID int64 `json:"bargainId"` // 砍价id
	IsFirst   bool  `json:"isFirst"`   // 是否为第一次砍价
}

// 获取活动规则
type GetBargainRuleInput {
	BargainID int64 `json:"bargainId"` // 砍价id
}

// 获取活动规则
type GetBargainRuleReply {
	BargainRuleDescribe string `json:"bargainRuleDescribe"` // 规则描述
}

// 获取砍价商品信息
type GetBargainCryptominerInput {
	CryptominerID int64 `json:"cryptominerId"` // 矿机id
}

// 获取砍价矿机信息
type GetBargainCryptominerReply {
	CryptominerName    string `json:"cryptominerName"`    // 矿机名称
	CryptominerPicture string `json:"cryptominerPicture"` // 矿机图片
}

// 获取砍价进度
type GetBargainProgressInput {
	BargainID int64 `json:"bargainId"` // 砍价id
}

// 获取砍价进度
type GetBargainProgressReply {
	ActivityStartTime string  `json:"activityStartTime"` // 活动开始时间
	RemainingPrice    float32 `json:"remainingPrice"`    // 剩余金额
}

// 获取砍价记录列表
type GetBargainRecordInput {
	BargainID int64 `json:"bargainId"` // 砍价id
}

// 获取砍价记录列表
type GetBargainRecordReply {
	Cryptominer   []*Cryptominer   `json:"cryptominer"`   // 矿机
	BargainAmount []*BargainAmount `json:"bargainAmount"` // 每份金额计算
	Profile       []*Profile       `json:"profile"`       // 对应金额的砍价人信息
}

// 金额计算
type BargainAmount {
	FirstBargainPercentage float32 `json:"firstBargainPercentage"` // 初次砍价百分比
	BargainMinPrice        float32 `json:"bargainMinPrice"`        // 砍价最小额度
	BargainPrice           float32 `json:"bargainPrice"`           // 本次砍价额度
}

// 用户信息
type Profile {
	UserID   int64  `json:"userId"`   // 用户id
	UserName string `json:"userName"` // 用户名
	Avatar   string `json:"avatar"`   // 用户头像
}

// 金额计算
type JudgeGoodsPurchaseInput {
	UserID   int64  `json:"userId"`   // 用户id
	GoodName string `json:"goodName"` // 商品名称
}

// 用户信息
type JudgeGoodsPurchaseReply {
	IsPurchase bool `json:"isPurchase"` //  true 已有购买，false 没有购买记录
}

// 创建商品，需要鉴权
@server(
	prefix :/v1
	group :adminmall
	//	middleware : BlackMiddleware
	//  jwt : AdminAuth
)

service gateway-api {
	@doc "管理系统添加矿机"
	@handler CreateCryptominer
	post /adminmall/create/cryptominer (CreateCryptominerInput)  returns (IsSuccessReply)
	
	@doc "管理系统添加道具"
	@handler CreateProp
	post /adminmall/create/prop (CreatePropInput)  returns (IsSuccessReply)
	
	@doc "后台获取商品列表"
	@handler AdminGoodList
	post /adminmall/req/goodlist (AdminGoodListInput)  returns (AdminGoodListReply)
	
	@doc "管理系统上架商品"
	@handler StartGood
	post /adminmall/manage/startgoodstart (StartGoodInput)  returns (IsSuccessReply)
	
	@doc "管理系统创建矿机活动"
	@handler CreateActivity
	post /adminmall/create/activity (CreateActivityInput)  returns (IsSuccessReply)
	
	@doc "后台获取活动列表"
	@handler AdminActivityList
	post /adminmall/req/activitylist (AdminActivityListInput)  returns (AdminActivityListReply)
	
	@doc "管理系统开启矿机活动"
	@handler StartActivity
	post /adminmall/manage/startactivity (StartActivityInput)  returns (IsSuccessReply)
	
}

// 用户商城，需要鉴权
@server(
	prefix :/v1
	group :mall
	//	middleware : BlackMiddleware
	// jwt : Auth
)

service gateway-api {
	@doc "获取商品列表"
	@handler GetGoodsList
	post /mall/goodlist (GetGoodsListInput)  returns (GetGoodsListReply)
	
	@doc "判断是否可砍"
	@handler JudgeBargain
	post /mall/judgebargain (JudgeBargainInput)  returns (JudgeBargainReply)
	
	@doc "全额购买矿机"
	@handler CryptominerFullPurchase
	post /mall/purchase/full (CryptominerPurchaseInput)  returns (IsSuccessReply)
	
	@doc "砍价购买矿机"
	@handler CryptominerBargainPurchase
	post /mall/purchase/bargain (CryptominerBargainInput)  returns (CryptominerBargainReply)
	
	@doc "购买道具"
	@handler PropPurchase
	post /mall/purchase/prop (PropPurchaseInput)  returns (IsSuccessReply)
	
	@doc "获取砍价活动规则"
	@handler GetBargainRule
	post /mall/activity/rule (GetBargainRuleInput)  returns (GetBargainRuleReply)
	
	@doc "获取砍价矿机信息"
	@handler GetBargainCryptominer
	post /mall/activity/cryptominer (GetBargainCryptominerInput)  returns (GetBargainCryptominerReply)
	
	@doc "获取砍价进度"
	@handler GetBargainProgress
	post /mall/activity/progress (GetBargainProgressInput)  returns (GetBargainProgressReply)
	
	@doc "获取砍价记录列表"
	@handler GetBargainRecord
	post /mall/activity/bargainlist (GetBargainRecordInput)  returns (GetBargainRecordReply)
	
}